{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\chatb\\\\Desktop\\\\Code\\\\nextJS\\\\find-the-pair\\\\components\\\\Grid.jsx\",\n    _s = $RefreshSig$();\n\nvar __jsx = React.createElement;\nimport React, { useEffect } from \"react\";\nimport { connect } from \"react-redux\";\nimport styled from \"styled-components\";\nimport { LIMIT_CARDS, SHUFFLE, DUPLICATE_CARDS, RESET_CARDS, FLIP_ALL_CARDS, FLIP_CARD } from \"../redux/constants/action-types\";\nimport { flipCard as _flipCard } from \"../redux/actions/index\";\n\nfunction Grid(props) {\n  _s();\n\n  var _this = this;\n\n  useEffect(function () {\n    props.resetCards();\n    props.shuffleCards();\n    props.limitCards();\n    props.duplicateCards();\n    props.shuffleCards();\n    setTimeout(function () {\n      props.flipAllCards();\n    }, 1500);\n  }, [props.numberOfPairs]);\n  return (//   grid Item\n    __jsx(\"gridContainer\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 30,\n        columnNumber: 5\n      }\n    }, props.cards.map(function (el, index) {\n      if (el.isActive) {\n        return __jsx(\"div\", {\n          key: \"div\" + index,\n          style: {\n            margin: \"0 1px\",\n            display: \"inline-block\",\n            height: \"125px\",\n            width: \"125px\",\n            backgroundColor: \"#bbb\"\n          },\n          __self: _this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 34,\n            columnNumber: 13\n          }\n        }, __jsx(\"img\", {\n          key: el.src + index,\n          \"data-index\": el.index,\n          src: el.src,\n          __self: _this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 44,\n            columnNumber: 15\n          }\n        }));\n      } else {\n        return __jsx(\"div\", {\n          key: \"div\" + index,\n          onClick: function onClick() {\n            return props.flipCard(el.index, el.src);\n          },\n          style: {\n            margin: \"0 1px\",\n            display: \"inline-block\",\n            height: \"125px\",\n            width: \"125px\",\n            backgroundColor: \"#bbb\"\n          },\n          __self: _this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 49,\n            columnNumber: 13\n          }\n        }, __jsx(\"img\", {\n          style: {\n            display: \"none\"\n          },\n          key: el.src + index,\n          \"data-index\": el.index,\n          src: el.src,\n          __self: _this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 60,\n            columnNumber: 15\n          }\n        }));\n      }\n    }))\n  );\n}\n\n_s(Grid, \"OD7bBpZva5O2jO+Puf00hKivP7c=\");\n\n_c = Grid;\n\nvar mapStateToProps = function mapStateToProps(state) {\n  return {\n    numberOfPairs: state.numberOfPairs,\n    cards: state.cards,\n    gameState: state.gameState\n  };\n};\n\nvar mapDispatchToProps = function mapDispatchToProps(dispatch) {\n  return {\n    shuffleCards: function shuffleCards() {\n      return dispatch({\n        type: SHUFFLE\n      });\n    },\n    limitCards: function limitCards() {\n      return dispatch({\n        type: LIMIT_CARDS\n      });\n    },\n    duplicateCards: function duplicateCards() {\n      return dispatch({\n        type: DUPLICATE_CARDS\n      });\n    },\n    resetCards: function resetCards() {\n      return dispatch({\n        type: RESET_CARDS\n      });\n    },\n    flipAllCards: function flipAllCards() {\n      return dispatch({\n        type: FLIP_ALL_CARDS\n      });\n    },\n    flipCard: function flipCard(index) {\n      return dispatch(_flipCard(index));\n    }\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Grid); // ---------------------------------\n\nvar gridContainer = styled.div.withConfig({\n  displayName: \"Grid__gridContainer\",\n  componentId: \"v3z7jl-0\"\n})([\"width:520px;height:520px;margin:5px auto;\"]);\n\nvar _c;\n\n$RefreshReg$(_c, \"Grid\");","map":{"version":3,"sources":["C:/Users/chatb/Desktop/Code/nextJS/find-the-pair/components/Grid.jsx"],"names":["React","useEffect","connect","styled","LIMIT_CARDS","SHUFFLE","DUPLICATE_CARDS","RESET_CARDS","FLIP_ALL_CARDS","FLIP_CARD","flipCard","Grid","props","resetCards","shuffleCards","limitCards","duplicateCards","setTimeout","flipAllCards","numberOfPairs","cards","map","el","index","isActive","margin","display","height","width","backgroundColor","src","mapStateToProps","state","gameState","mapDispatchToProps","dispatch","type","gridContainer","div"],"mappings":"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","sourcesContent":["import React, { useEffect } from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport styled from \"styled-components\";\r\nimport {\r\n  LIMIT_CARDS,\r\n  SHUFFLE,\r\n  DUPLICATE_CARDS,\r\n  RESET_CARDS,\r\n  FLIP_ALL_CARDS,\r\n  FLIP_CARD,\r\n} from \"../redux/constants/action-types\";\r\n\r\nimport { flipCard } from \"../redux/actions/index\";\r\n\r\nfunction Grid(props) {\r\n  useEffect(() => {\r\n    props.resetCards();\r\n    props.shuffleCards();\r\n    props.limitCards();\r\n    props.duplicateCards();\r\n    props.shuffleCards();\r\n\r\n    setTimeout(() => {\r\n      props.flipAllCards();\r\n    }, 1500);\r\n  }, [props.numberOfPairs]);\r\n\r\n  return (\r\n    //   grid Item\r\n    <gridContainer>\r\n      {props.cards.map((el, index) => {\r\n        if (el.isActive) {\r\n          return (\r\n            <div\r\n              key={\"div\" + index}\r\n              style={{\r\n                margin: \"0 1px\",\r\n                display: \"inline-block\",\r\n                height: \"125px\",\r\n                width: \"125px\",\r\n                backgroundColor: \"#bbb\",\r\n              }}\r\n            >\r\n              <img key={el.src + index} data-index={el.index} src={el.src} />\r\n            </div>\r\n          );\r\n        } else {\r\n          return (\r\n            <div\r\n              key={\"div\" + index}\r\n              onClick={() => props.flipCard(el.index, el.src)}\r\n              style={{\r\n                margin: \"0 1px\",\r\n                display: \"inline-block\",\r\n                height: \"125px\",\r\n                width: \"125px\",\r\n                backgroundColor: \"#bbb\",\r\n              }}\r\n            >\r\n              <img\r\n                style={{ display: \"none\" }}\r\n                key={el.src + index}\r\n                data-index={el.index}\r\n                src={el.src}\r\n              />\r\n            </div>\r\n          );\r\n        }\r\n      })}\r\n    </gridContainer>\r\n  );\r\n}\r\n\r\nconst mapStateToProps = (state) => ({\r\n  numberOfPairs: state.numberOfPairs,\r\n  cards: state.cards,\r\n  gameState: state.gameState,\r\n});\r\n\r\nconst mapDispatchToProps = (dispatch) => ({\r\n  shuffleCards: () => dispatch({ type: SHUFFLE }),\r\n  limitCards: () => dispatch({ type: LIMIT_CARDS }),\r\n  duplicateCards: () => dispatch({ type: DUPLICATE_CARDS }),\r\n  resetCards: () => dispatch({ type: RESET_CARDS }),\r\n  flipAllCards: () => dispatch({ type: FLIP_ALL_CARDS }),\r\n  flipCard: (index) => dispatch(flipCard(index)),\r\n});\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Grid);\r\n\r\n// ---------------------------------\r\nconst gridContainer = styled.div`\r\n  width: 520px;\r\n  height: 520px;\r\n  margin: 5px auto;\r\n`;\r\n"]},"metadata":{},"sourceType":"module"}