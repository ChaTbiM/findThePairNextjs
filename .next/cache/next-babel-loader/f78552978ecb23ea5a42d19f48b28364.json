{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\chatb\\\\Desktop\\\\Code\\\\nextJS\\\\find-the-pair\\\\components\\\\Grid.jsx\";\nvar __jsx = React.createElement;\nimport React, { useEffect } from \"react\";\nimport { connect } from \"react-redux\";\nimport styled from \"styled-components\";\nimport { LIMIT_CARDS, SHUFFLE, DUPLICATE_CARDS, RESET_CARDS, FLIP_ALL_CARDS, FLIP_CARD } from \"../redux/constants/action-types\";\nimport { flipCard } from \"../redux/actions/index\";\n\nfunction Grid(props) {\n  useEffect(() => {\n    if (props.clickCounter == 0) {\n      props.resetCards();\n      props.shuffleCards();\n      props.limitCards();\n      props.duplicateCards();\n      props.shuffleCards();\n      setTimeout(() => {\n        props.flipAllCards();\n      }, 1500);\n    } else {\n      props.flipAllCards();\n    }\n  }, [props.numberOfPairs, prop.clickCounter]);\n  return (//   grid Item\n    __jsx(\"gridContainer\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 34,\n        columnNumber: 5\n      }\n    }, props.cards.map((el, index) => {\n      if (el.isActive) {\n        return __jsx(\"div\", {\n          key: \"div\" + index,\n          style: {\n            margin: \" 1px\",\n            float: \"left\",\n            display: \"inline-block\",\n            height: \"125px\",\n            width: \"125px\",\n            backgroundColor: \"#bbb\"\n          },\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 38,\n            columnNumber: 13\n          }\n        }, __jsx(\"img\", {\n          key: el.src + index,\n          \"data-index\": el.index,\n          src: el.src,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 49,\n            columnNumber: 15\n          }\n        }));\n      } else {\n        return __jsx(\"div\", {\n          key: \"div\" + index,\n          onClick: () => props.flipCard(el.index),\n          style: {\n            margin: \" 1px\",\n            display: \"inline-block\",\n            float: \"left\",\n            height: \"125px\",\n            width: \"125px\",\n            backgroundColor: \"#bbb\"\n          },\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 54,\n            columnNumber: 13\n          }\n        });\n      }\n    }))\n  );\n}\n\nconst mapStateToProps = state => ({\n  numberOfPairs: state.numberOfPairs,\n  cards: state.cards,\n  gameState: state.gameState,\n  clickCounter: state.clickCounter\n});\n\nconst mapDispatchToProps = dispatch => ({\n  shuffleCards: () => dispatch({\n    type: SHUFFLE\n  }),\n  limitCards: () => dispatch({\n    type: LIMIT_CARDS\n  }),\n  duplicateCards: () => dispatch({\n    type: DUPLICATE_CARDS\n  }),\n  resetCards: () => dispatch({\n    type: RESET_CARDS\n  }),\n  flipAllCards: () => dispatch({\n    type: FLIP_ALL_CARDS\n  }),\n  flipCard: index => dispatch(flipCard(index))\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Grid); // ---------------------------------\n\nconst gridContainer = styled.div.withConfig({\n  displayName: \"Grid__gridContainer\",\n  componentId: \"v3z7jl-0\"\n})([\"width:520px;height:520px;margin:5px auto;\"]);","map":{"version":3,"sources":["C:/Users/chatb/Desktop/Code/nextJS/find-the-pair/components/Grid.jsx"],"names":["React","useEffect","connect","styled","LIMIT_CARDS","SHUFFLE","DUPLICATE_CARDS","RESET_CARDS","FLIP_ALL_CARDS","FLIP_CARD","flipCard","Grid","props","clickCounter","resetCards","shuffleCards","limitCards","duplicateCards","setTimeout","flipAllCards","numberOfPairs","prop","cards","map","el","index","isActive","margin","float","display","height","width","backgroundColor","src","mapStateToProps","state","gameState","mapDispatchToProps","dispatch","type","gridContainer","div"],"mappings":";;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,SAASC,OAAT,QAAwB,aAAxB;AACA,OAAOC,MAAP,MAAmB,mBAAnB;AACA,SACEC,WADF,EAEEC,OAFF,EAGEC,eAHF,EAIEC,WAJF,EAKEC,cALF,EAMEC,SANF,QAOO,iCAPP;AASA,SAASC,QAAT,QAAyB,wBAAzB;;AAEA,SAASC,IAAT,CAAcC,KAAd,EAAqB;AACnBX,EAAAA,SAAS,CAAC,MAAM;AACd,QAAIW,KAAK,CAACC,YAAN,IAAsB,CAA1B,EAA6B;AAC3BD,MAAAA,KAAK,CAACE,UAAN;AACAF,MAAAA,KAAK,CAACG,YAAN;AACAH,MAAAA,KAAK,CAACI,UAAN;AACAJ,MAAAA,KAAK,CAACK,cAAN;AACAL,MAAAA,KAAK,CAACG,YAAN;AAEAG,MAAAA,UAAU,CAAC,MAAM;AACfN,QAAAA,KAAK,CAACO,YAAN;AACD,OAFS,EAEP,IAFO,CAAV;AAGD,KAVD,MAUO;AACLP,MAAAA,KAAK,CAACO,YAAN;AACD;AACF,GAdQ,EAcN,CAACP,KAAK,CAACQ,aAAP,EAAsBC,IAAI,CAACR,YAA3B,CAdM,CAAT;AAgBA,SACE;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACGD,KAAK,CAACU,KAAN,CAAYC,GAAZ,CAAgB,CAACC,EAAD,EAAKC,KAAL,KAAe;AAC9B,UAAID,EAAE,CAACE,QAAP,EAAiB;AACf,eACE;AACE,UAAA,GAAG,EAAE,QAAQD,KADf;AAEE,UAAA,KAAK,EAAE;AACLE,YAAAA,MAAM,EAAE,MADH;AAELC,YAAAA,KAAK,EAAE,MAFF;AAGLC,YAAAA,OAAO,EAAE,cAHJ;AAILC,YAAAA,MAAM,EAAE,OAJH;AAKLC,YAAAA,KAAK,EAAE,OALF;AAMLC,YAAAA,eAAe,EAAE;AANZ,WAFT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WAWE;AAAK,UAAA,GAAG,EAAER,EAAE,CAACS,GAAH,GAASR,KAAnB;AAA0B,wBAAYD,EAAE,CAACC,KAAzC;AAAgD,UAAA,GAAG,EAAED,EAAE,CAACS,GAAxD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UAXF,CADF;AAeD,OAhBD,MAgBO;AACL,eACE;AACE,UAAA,GAAG,EAAE,QAAQR,KADf;AAEE,UAAA,OAAO,EAAE,MAAMb,KAAK,CAACF,QAAN,CAAec,EAAE,CAACC,KAAlB,CAFjB;AAGE,UAAA,KAAK,EAAE;AACLE,YAAAA,MAAM,EAAE,MADH;AAELE,YAAAA,OAAO,EAAE,cAFJ;AAGLD,YAAAA,KAAK,EAAE,MAHF;AAILE,YAAAA,MAAM,EAAE,OAJH;AAKLC,YAAAA,KAAK,EAAE,OALF;AAMLC,YAAAA,eAAe,EAAE;AANZ,WAHT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AAcD;AACF,KAjCA,CADH;AAFF;AAuCD;;AAED,MAAME,eAAe,GAAIC,KAAD,KAAY;AAClCf,EAAAA,aAAa,EAAEe,KAAK,CAACf,aADa;AAElCE,EAAAA,KAAK,EAAEa,KAAK,CAACb,KAFqB;AAGlCc,EAAAA,SAAS,EAAED,KAAK,CAACC,SAHiB;AAIlCvB,EAAAA,YAAY,EAAEsB,KAAK,CAACtB;AAJc,CAAZ,CAAxB;;AAOA,MAAMwB,kBAAkB,GAAIC,QAAD,KAAe;AACxCvB,EAAAA,YAAY,EAAE,MAAMuB,QAAQ,CAAC;AAAEC,IAAAA,IAAI,EAAElC;AAAR,GAAD,CADY;AAExCW,EAAAA,UAAU,EAAE,MAAMsB,QAAQ,CAAC;AAAEC,IAAAA,IAAI,EAAEnC;AAAR,GAAD,CAFc;AAGxCa,EAAAA,cAAc,EAAE,MAAMqB,QAAQ,CAAC;AAAEC,IAAAA,IAAI,EAAEjC;AAAR,GAAD,CAHU;AAIxCQ,EAAAA,UAAU,EAAE,MAAMwB,QAAQ,CAAC;AAAEC,IAAAA,IAAI,EAAEhC;AAAR,GAAD,CAJc;AAKxCY,EAAAA,YAAY,EAAE,MAAMmB,QAAQ,CAAC;AAAEC,IAAAA,IAAI,EAAE/B;AAAR,GAAD,CALY;AAMxCE,EAAAA,QAAQ,EAAGe,KAAD,IAAWa,QAAQ,CAAC5B,QAAQ,CAACe,KAAD,CAAT;AANW,CAAf,CAA3B;;AASA,eAAevB,OAAO,CAACgC,eAAD,EAAkBG,kBAAlB,CAAP,CAA6C1B,IAA7C,CAAf,C,CAEA;;AACA,MAAM6B,aAAa,GAAGrC,MAAM,CAACsC,GAAV;AAAA;AAAA;AAAA,iDAAnB","sourcesContent":["import React, { useEffect } from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport styled from \"styled-components\";\r\nimport {\r\n  LIMIT_CARDS,\r\n  SHUFFLE,\r\n  DUPLICATE_CARDS,\r\n  RESET_CARDS,\r\n  FLIP_ALL_CARDS,\r\n  FLIP_CARD,\r\n} from \"../redux/constants/action-types\";\r\n\r\nimport { flipCard } from \"../redux/actions/index\";\r\n\r\nfunction Grid(props) {\r\n  useEffect(() => {\r\n    if (props.clickCounter == 0) {\r\n      props.resetCards();\r\n      props.shuffleCards();\r\n      props.limitCards();\r\n      props.duplicateCards();\r\n      props.shuffleCards();\r\n\r\n      setTimeout(() => {\r\n        props.flipAllCards();\r\n      }, 1500);\r\n    } else {\r\n      props.flipAllCards();\r\n    }\r\n  }, [props.numberOfPairs, prop.clickCounter]);\r\n\r\n  return (\r\n    //   grid Item\r\n    <gridContainer>\r\n      {props.cards.map((el, index) => {\r\n        if (el.isActive) {\r\n          return (\r\n            <div\r\n              key={\"div\" + index}\r\n              style={{\r\n                margin: \" 1px\",\r\n                float: \"left\",\r\n                display: \"inline-block\",\r\n                height: \"125px\",\r\n                width: \"125px\",\r\n                backgroundColor: \"#bbb\",\r\n              }}\r\n            >\r\n              <img key={el.src + index} data-index={el.index} src={el.src} />\r\n            </div>\r\n          );\r\n        } else {\r\n          return (\r\n            <div\r\n              key={\"div\" + index}\r\n              onClick={() => props.flipCard(el.index)}\r\n              style={{\r\n                margin: \" 1px\",\r\n                display: \"inline-block\",\r\n                float: \"left\",\r\n                height: \"125px\",\r\n                width: \"125px\",\r\n                backgroundColor: \"#bbb\",\r\n              }}\r\n            ></div>\r\n          );\r\n        }\r\n      })}\r\n    </gridContainer>\r\n  );\r\n}\r\n\r\nconst mapStateToProps = (state) => ({\r\n  numberOfPairs: state.numberOfPairs,\r\n  cards: state.cards,\r\n  gameState: state.gameState,\r\n  clickCounter: state.clickCounter,\r\n});\r\n\r\nconst mapDispatchToProps = (dispatch) => ({\r\n  shuffleCards: () => dispatch({ type: SHUFFLE }),\r\n  limitCards: () => dispatch({ type: LIMIT_CARDS }),\r\n  duplicateCards: () => dispatch({ type: DUPLICATE_CARDS }),\r\n  resetCards: () => dispatch({ type: RESET_CARDS }),\r\n  flipAllCards: () => dispatch({ type: FLIP_ALL_CARDS }),\r\n  flipCard: (index) => dispatch(flipCard(index)),\r\n});\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Grid);\r\n\r\n// ---------------------------------\r\nconst gridContainer = styled.div`\r\n  width: 520px;\r\n  height: 520px;\r\n  margin: 5px auto;\r\n`;\r\n"]},"metadata":{},"sourceType":"module"}