{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\chatb\\\\Desktop\\\\Code\\\\nextJS\\\\find-the-pair\\\\components\\\\Grid.jsx\";\nvar __jsx = React.createElement;\nimport React, { useEffect } from \"react\";\nimport { connect } from \"react-redux\";\nimport styled from \"styled-components\";\nimport { LIMIT_CARDS, SHUFFLE, DUPLICATE_CARDS, RESET_CARDS, FLIP_ALL_CARDS, FLIP_CARD } from \"../redux/constants/action-types\";\nimport { flipCard } from \"../redux/actions/index\";\n\nfunction Grid(props) {\n  useEffect(() => {\n    props.resetCards();\n    props.shuffleCards();\n    props.limitCards();\n    props.duplicateCards();\n    props.shuffleCards();\n    setTimeout(() => {\n      props.flipAllCards();\n    }, 1500);\n  }, [props.numberOfPairs]);\n  useEffect(() => {\n    console.log(\"here\", props.matching);\n\n    if (props.matching) {\n      setTimeout(() => {\n        props.flipAllCards();\n      }, 1000);\n    }\n  }, [props.matching]);\n  return (//   grid Item\n    __jsx(GridContainer, {\n      className: \"clearfix\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 39,\n        columnNumber: 5\n      }\n    }, props.cards.map((el, index) => {\n      if (el.isActive) {\n        return __jsx(ImageWrapper, {\n          className: \"clearfix\",\n          width: props.width,\n          key: \"div\" + index,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 43,\n            columnNumber: 13\n          }\n        }, __jsx(\"img\", {\n          key: el.src + index,\n          \"data-index\": el.index,\n          src: el.src,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 48,\n            columnNumber: 15\n          }\n        }));\n      } else {\n        return __jsx(ImageWrapper, {\n          width: props.width,\n          key: \"div\" + index,\n          onClick: () => props.flipCard(el.index),\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 53,\n            columnNumber: 13\n          }\n        });\n      }\n    }))\n  );\n}\n\nconst mapStateToProps = state => ({\n  numberOfPairs: state.numberOfPairs,\n  cards: state.cards,\n  clickCounter: state.clickCounter,\n  matching: state.matching,\n  width: state.width\n});\n\nconst mapDispatchToProps = dispatch => ({\n  shuffleCards: () => dispatch({\n    type: SHUFFLE\n  }),\n  limitCards: () => dispatch({\n    type: LIMIT_CARDS\n  }),\n  duplicateCards: () => dispatch({\n    type: DUPLICATE_CARDS\n  }),\n  resetCards: () => dispatch({\n    type: RESET_CARDS\n  }),\n  flipAllCards: () => dispatch({\n    type: FLIP_ALL_CARDS\n  }),\n  flipCard: index => dispatch(flipCard(index))\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Grid); // ---------------------------------\n\nconst GridContainer = styled.div.withConfig({\n  displayName: \"Grid__GridContainer\",\n  componentId: \"v3z7jl-0\"\n})([\"width:520px;height:520px;margin:5px auto;\"]);\nconst ImageWrapper = styled.div.withConfig({\n  displayName: \"Grid__ImageWrapper\",\n  componentId: \"v3z7jl-1\"\n})([\"display:inline-block;margin-right:1px;margin-top:2px;width:\", \";height:\", \";background-color:#bbb;overflow:auto;img{width:\", \";height:\", \";padding:1px;}\"], props => props.width + \"px\", props => props.width + \"px\", props => props.width + \"px\", props => props.width + \"px\");\nImageWrapper.defaultProps = {\n  width: 125\n};","map":{"version":3,"sources":["C:/Users/chatb/Desktop/Code/nextJS/find-the-pair/components/Grid.jsx"],"names":["React","useEffect","connect","styled","LIMIT_CARDS","SHUFFLE","DUPLICATE_CARDS","RESET_CARDS","FLIP_ALL_CARDS","FLIP_CARD","flipCard","Grid","props","resetCards","shuffleCards","limitCards","duplicateCards","setTimeout","flipAllCards","numberOfPairs","console","log","matching","cards","map","el","index","isActive","width","src","mapStateToProps","state","clickCounter","mapDispatchToProps","dispatch","type","GridContainer","div","ImageWrapper","defaultProps"],"mappings":"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","sourcesContent":["import React, { useEffect } from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport styled from \"styled-components\";\r\nimport {\r\n  LIMIT_CARDS,\r\n  SHUFFLE,\r\n  DUPLICATE_CARDS,\r\n  RESET_CARDS,\r\n  FLIP_ALL_CARDS,\r\n  FLIP_CARD,\r\n} from \"../redux/constants/action-types\";\r\n\r\nimport { flipCard } from \"../redux/actions/index\";\r\n\r\nfunction Grid(props) {\r\n  useEffect(() => {\r\n    props.resetCards();\r\n    props.shuffleCards();\r\n    props.limitCards();\r\n    props.duplicateCards();\r\n    props.shuffleCards();\r\n\r\n    setTimeout(() => {\r\n      props.flipAllCards();\r\n    }, 1500);\r\n  }, [props.numberOfPairs]);\r\n\r\n  useEffect(() => {\r\n    console.log(\"here\", props.matching);\r\n    if (props.matching) {\r\n      setTimeout(() => {\r\n        props.flipAllCards();\r\n      }, 1000);\r\n    }\r\n  }, [props.matching]);\r\n\r\n  return (\r\n    //   grid Item\r\n    <GridContainer className=\"clearfix\">\r\n      {props.cards.map((el, index) => {\r\n        if (el.isActive) {\r\n          return (\r\n            <ImageWrapper\r\n              className=\"clearfix\"\r\n              width={props.width}\r\n              key={\"div\" + index}\r\n            >\r\n              <img key={el.src + index} data-index={el.index} src={el.src} />\r\n            </ImageWrapper>\r\n          );\r\n        } else {\r\n          return (\r\n            <ImageWrapper\r\n              width={props.width}\r\n              key={\"div\" + index}\r\n              onClick={() => props.flipCard(el.index)}\r\n            />\r\n          );\r\n        }\r\n      })}\r\n    </GridContainer>\r\n  );\r\n}\r\n\r\nconst mapStateToProps = (state) => ({\r\n  numberOfPairs: state.numberOfPairs,\r\n  cards: state.cards,\r\n  clickCounter: state.clickCounter,\r\n  matching: state.matching,\r\n  width: state.width,\r\n});\r\n\r\nconst mapDispatchToProps = (dispatch) => ({\r\n  shuffleCards: () => dispatch({ type: SHUFFLE }),\r\n  limitCards: () => dispatch({ type: LIMIT_CARDS }),\r\n  duplicateCards: () => dispatch({ type: DUPLICATE_CARDS }),\r\n  resetCards: () => dispatch({ type: RESET_CARDS }),\r\n  flipAllCards: () => dispatch({ type: FLIP_ALL_CARDS }),\r\n  flipCard: (index) => dispatch(flipCard(index)),\r\n});\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Grid);\r\n\r\n// ---------------------------------\r\nconst GridContainer = styled.div`\r\n  width: 520px;\r\n  height: 520px;\r\n  margin: 5px auto;\r\n`;\r\n\r\nconst ImageWrapper = styled.div`\r\n  display: inline-block;\r\n  margin-right: 1px;\r\n  margin-top: 2px;\r\n  width: ${(props) => props.width + \"px\"};\r\n  height: ${(props) => props.width + \"px\"};\r\n  background-color: #bbb;\r\n\r\n  overflow: auto;\r\n\r\n  img {\r\n    width: ${(props) => props.width + \"px\"};\r\n    height: ${(props) => props.width + \"px\"};\r\n    padding: 1px;\r\n  }\r\n`;\r\n\r\nImageWrapper.defaultProps = {\r\n  width: 125,\r\n};\r\n"]},"metadata":{},"sourceType":"module"}