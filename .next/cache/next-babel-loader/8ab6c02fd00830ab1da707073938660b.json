{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\n\nvar _jsxFileName = \"C:\\\\Users\\\\chatb\\\\Desktop\\\\Code\\\\nextJS\\\\find-the-pair\\\\components\\\\Grid.jsx\",\n    _s = $RefreshSig$();\n\nvar __jsx = React.createElement;\nimport React, { useEffect } from \"react\";\nimport { connect } from \"react-redux\";\nimport styled from \"styled-components\";\nimport { LIMIT_CARDS, SHUFFLE, DUPLICATE_CARDS, RESET_CARDS, FLIP_ALL_CARDS, FLIP_CARD, START_GAME } from \"../redux/constants/action-types\";\nimport { flipCard as _flipCard } from \"../redux/actions/index\";\n\nfunction Grid(props) {\n  _s();\n\n  var _this = this;\n\n  useEffect(function () {\n    props.resetCards();\n    props.shuffleCards();\n    props.limitCards();\n    props.duplicateCards();\n    props.shuffleCards();\n    setTimeout(function () {\n      props.flipAllCards();\n    }, 1500);\n  }, [props.numberOfPairs]);\n  useEffect(function () {\n    if (props.matching) {\n      setTimeout(function () {\n        props.flipAllCards();\n      }, 1000);\n    }\n  }, [props.matching]);\n  useEffect(function () {\n    if (props.numberOfFoundPairs === props.numberOfPairs) {\n      alert(\"YOU WIN \");\n    }\n  }, [props.numberOfFoundPairs]);\n  return (//   grid Item\n    __jsx(GridContainer, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 45,\n        columnNumber: 5\n      }\n    }, props.cards.map(function (el, index) {\n      // matching  and isActive\n      // matching and notActive\n      if (props.matching) {\n        if (el.isActive) {\n          return __jsx(ImageWrapper, {\n            color: \"#bbb\",\n            width: props.width,\n            key: \"div\" + index,\n            __self: _this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 52,\n              columnNumber: 15\n            }\n          }, __jsx(\"img\", {\n            key: el.src + index,\n            \"data-index\": el.index,\n            src: el.src,\n            __self: _this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 57,\n              columnNumber: 17\n            }\n          }));\n        }\n      } else {}\n\n      if (el.match && !props.matching) {\n        return __jsx(ImageWrapper, {\n          color: \"transparent\",\n          width: props.width,\n          key: \"div\" + index,\n          __self: _this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 66,\n            columnNumber: 13\n          }\n        });\n      }\n\n      if (el.isActive && props.matching) {\n        return __jsx(ImageWrapper, {\n          color: \"#bbb\",\n          width: props.width,\n          key: \"div\" + index,\n          __self: _this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 76,\n            columnNumber: 13\n          }\n        }, __jsx(\"img\", {\n          key: el.src + index,\n          \"data-index\": el.index,\n          src: el.src,\n          __self: _this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 77,\n            columnNumber: 15\n          }\n        }));\n      } else {\n        return __jsx(ImageWrapper, {\n          color: \"#bbb\",\n          width: props.width,\n          key: \"div\" + index,\n          onClick: function onClick() {\n            if (props.numberOfAttempts === 0) {\n              props.startGame();\n            }\n\n            if (!props.matching) {\n              props.flipCard(el.index);\n            }\n          },\n          __self: _this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 82,\n            columnNumber: 13\n          }\n        });\n      }\n    }))\n  );\n}\n\n_s(Grid, \"ewq31d5h+FnD/qJW52w5UqeNMN4=\");\n\n_c = Grid;\n\nvar mapStateToProps = function mapStateToProps(state) {\n  var _ref;\n\n  return _ref = {\n    numberOfPairs: state.numberOfPairs,\n    numberOfAttempts: state.numberOfAttempts,\n    numberOfFoundPairs: state.numberOfFoundPairs,\n    cards: state.cards,\n    clickCounter: state.clickCounter,\n    matching: state.matching,\n    width: state.width\n  }, _defineProperty(_ref, \"matching\", state.matching), _defineProperty(_ref, \"isPlaying\", state.isPlaying), _ref;\n};\n\nvar mapDispatchToProps = function mapDispatchToProps(dispatch) {\n  return {\n    shuffleCards: function shuffleCards() {\n      return dispatch({\n        type: SHUFFLE\n      });\n    },\n    limitCards: function limitCards() {\n      return dispatch({\n        type: LIMIT_CARDS\n      });\n    },\n    duplicateCards: function duplicateCards() {\n      return dispatch({\n        type: DUPLICATE_CARDS\n      });\n    },\n    resetCards: function resetCards() {\n      return dispatch({\n        type: RESET_CARDS\n      });\n    },\n    flipAllCards: function flipAllCards() {\n      return dispatch({\n        type: FLIP_ALL_CARDS\n      });\n    },\n    flipCard: function flipCard(index) {\n      return dispatch(_flipCard(index));\n    },\n    startGame: function startGame() {\n      return dispatch({\n        type: START_GAME\n      });\n    }\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Grid); // ---------------------------------\n\nvar GridContainer = styled.div.withConfig({\n  displayName: \"Grid__GridContainer\",\n  componentId: \"v3z7jl-0\"\n})([\"width:520px;height:100vh;margin:0 auto;text-align:center;padding-top:5%;\"]);\n_c2 = GridContainer;\nvar ImageWrapper = styled.div.withConfig({\n  displayName: \"Grid__ImageWrapper\",\n  componentId: \"v3z7jl-1\"\n})([\"display:inline-block;margin-right:1px;margin-top:2px;width:\", \";height:\", \";background-color:\", \";overflow:auto;img,.blank{width:\", \";height:\", \";padding:1px;}\"], function (props) {\n  return props.width + \"px\";\n}, function (props) {\n  return props.width + \"px\";\n}, function (props) {\n  return props.color;\n}, function (props) {\n  return props.width + \"px\";\n}, function (props) {\n  return props.width + \"px\";\n});\n_c3 = ImageWrapper;\nImageWrapper.defaultProps = {\n  width: 125\n};\n\nvar _c, _c2, _c3;\n\n$RefreshReg$(_c, \"Grid\");\n$RefreshReg$(_c2, \"GridContainer\");\n$RefreshReg$(_c3, \"ImageWrapper\");","map":{"version":3,"sources":["C:/Users/chatb/Desktop/Code/nextJS/find-the-pair/components/Grid.jsx"],"names":["React","useEffect","connect","styled","LIMIT_CARDS","SHUFFLE","DUPLICATE_CARDS","RESET_CARDS","FLIP_ALL_CARDS","FLIP_CARD","START_GAME","flipCard","Grid","props","resetCards","shuffleCards","limitCards","duplicateCards","setTimeout","flipAllCards","numberOfPairs","matching","numberOfFoundPairs","alert","cards","map","el","index","isActive","width","src","match","numberOfAttempts","startGame","mapStateToProps","state","clickCounter","isPlaying","mapDispatchToProps","dispatch","type","GridContainer","div","ImageWrapper","color","defaultProps"],"mappings":"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","sourcesContent":["import React, { useEffect } from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport styled from \"styled-components\";\r\nimport {\r\n  LIMIT_CARDS,\r\n  SHUFFLE,\r\n  DUPLICATE_CARDS,\r\n  RESET_CARDS,\r\n  FLIP_ALL_CARDS,\r\n  FLIP_CARD,\r\n  START_GAME,\r\n} from \"../redux/constants/action-types\";\r\n\r\nimport { flipCard } from \"../redux/actions/index\";\r\n\r\nfunction Grid(props) {\r\n  useEffect(() => {\r\n    props.resetCards();\r\n    props.shuffleCards();\r\n    props.limitCards();\r\n    props.duplicateCards();\r\n    props.shuffleCards();\r\n\r\n    setTimeout(() => {\r\n      props.flipAllCards();\r\n    }, 1500);\r\n  }, [props.numberOfPairs]);\r\n\r\n  useEffect(() => {\r\n    if (props.matching) {\r\n      setTimeout(() => {\r\n        props.flipAllCards();\r\n      }, 1000);\r\n    }\r\n  }, [props.matching]);\r\n\r\n  useEffect(() => {\r\n    if (props.numberOfFoundPairs === props.numberOfPairs) {\r\n      alert(\"YOU WIN \");\r\n    }\r\n  }, [props.numberOfFoundPairs]);\r\n\r\n  return (\r\n    //   grid Item\r\n    <GridContainer>\r\n      {props.cards.map((el, index) => {\r\n        // matching  and isActive\r\n        // matching and notActive\r\n        if (props.matching) {\r\n          if (el.isActive) {\r\n            return (\r\n              <ImageWrapper\r\n                color=\"#bbb\"\r\n                width={props.width}\r\n                key={\"div\" + index}\r\n              >\r\n                <img key={el.src + index} data-index={el.index} src={el.src} />\r\n              </ImageWrapper>\r\n            );\r\n          }\r\n        } else {\r\n        }\r\n\r\n        if (el.match && !props.matching) {\r\n          return (\r\n            <ImageWrapper\r\n              color=\"transparent\"\r\n              width={props.width}\r\n              key={\"div\" + index}\r\n            />\r\n          );\r\n        }\r\n\r\n        if (el.isActive && props.matching) {\r\n          return (\r\n            <ImageWrapper color=\"#bbb\" width={props.width} key={\"div\" + index}>\r\n              <img key={el.src + index} data-index={el.index} src={el.src} />\r\n            </ImageWrapper>\r\n          );\r\n        } else {\r\n          return (\r\n            <ImageWrapper\r\n              color=\"#bbb\"\r\n              width={props.width}\r\n              key={\"div\" + index}\r\n              onClick={() => {\r\n                if (props.numberOfAttempts === 0) {\r\n                  props.startGame();\r\n                }\r\n                if (!props.matching) {\r\n                  props.flipCard(el.index);\r\n                }\r\n              }}\r\n            />\r\n          );\r\n        }\r\n      })}\r\n    </GridContainer>\r\n  );\r\n}\r\n\r\nconst mapStateToProps = (state) => ({\r\n  numberOfPairs: state.numberOfPairs,\r\n  numberOfAttempts: state.numberOfAttempts,\r\n  numberOfFoundPairs: state.numberOfFoundPairs,\r\n  cards: state.cards,\r\n  clickCounter: state.clickCounter,\r\n  matching: state.matching,\r\n  width: state.width,\r\n  matching: state.matching,\r\n  isPlaying: state.isPlaying,\r\n});\r\n\r\nconst mapDispatchToProps = (dispatch) => ({\r\n  shuffleCards: () => dispatch({ type: SHUFFLE }),\r\n  limitCards: () => dispatch({ type: LIMIT_CARDS }),\r\n  duplicateCards: () => dispatch({ type: DUPLICATE_CARDS }),\r\n  resetCards: () => dispatch({ type: RESET_CARDS }),\r\n  flipAllCards: () => dispatch({ type: FLIP_ALL_CARDS }),\r\n  flipCard: (index) => dispatch(flipCard(index)),\r\n  startGame: () => dispatch({ type: START_GAME }),\r\n});\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Grid);\r\n\r\n// ---------------------------------\r\nconst GridContainer = styled.div`\r\n  width: 520px;\r\n  height: 100vh;\r\n  margin: 0 auto;\r\n  text-align: center;\r\n  padding-top: 5%;\r\n`;\r\n\r\nconst ImageWrapper = styled.div`\r\n  display: inline-block;\r\n  margin-right: 1px;\r\n  margin-top: 2px;\r\n  width: ${(props) => props.width + \"px\"};\r\n  height: ${(props) => props.width + \"px\"};\r\n  background-color: ${(props) => props.color};\r\n\r\n  overflow: auto;\r\n\r\n  img,\r\n  .blank {\r\n    width: ${(props) => props.width + \"px\"};\r\n    height: ${(props) => props.width + \"px\"};\r\n    padding: 1px;\r\n  }\r\n`;\r\n\r\nImageWrapper.defaultProps = {\r\n  width: 125,\r\n};\r\n"]},"metadata":{},"sourceType":"module"}