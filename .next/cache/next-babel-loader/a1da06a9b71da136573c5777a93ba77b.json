{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\chatb\\\\Desktop\\\\Code\\\\nextJS\\\\find-the-pair\\\\components\\\\Grid.jsx\";\nvar __jsx = React.createElement;\nimport React, { useEffect } from \"react\";\nimport { connect } from \"react-redux\";\nimport styled from \"styled-components\";\nimport { LIMIT_CARDS, SHUFFLE, DUPLICATE_CARDS, RESET_CARDS } from \"../redux/constants/action-types\";\n\nfunction renderCards(gameState) {\n  if (gameState === \"loading\") {\n    return props.cards.map((el, index) => {\n      return __jsx(\"img\", {\n        className: \"testing\",\n        key: el.src + index,\n        width: \"125\",\n        height: \"125\",\n        src: el.src,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 15,\n          columnNumber: 9\n        }\n      });\n    });\n  } else if (gameState === \"playing\") {\n    return props.cards.map((el, index) => {\n      return __jsx(\"div\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 26,\n          columnNumber: 14\n        }\n      }, \"1\");\n    });\n  }\n}\n\nfunction Grid(props) {\n  useEffect(() => {\n    props.resetCards();\n    props.shuffleCards();\n    props.limitCards();\n    props.duplicateCards();\n    props.shuffleCards();\n  }, [props.numberOfPairs]);\n  return (//   grid Item\n    __jsx(\"gridContainer\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 41,\n        columnNumber: 5\n      }\n    }, props.cards.map((el, index) => {\n      if (el.isActive) {\n        return __jsx(\"div\", {\n          style: {\n            margin: \"0 1px\",\n            display: \"inline-block\",\n            height: \"125px\",\n            width: \"125px\",\n            backgroundColor: \"#bbb\"\n          },\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 45,\n            columnNumber: 13\n          }\n        }, __jsx(\"img\", {\n          key: el.src + index,\n          \"data-index\": el.index,\n          src: el.src,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 54,\n            columnNumber: 15\n          }\n        }));\n      } else {\n        return __jsx(\"div\", {\n          style: {\n            margin: \"0 1px\",\n            display: \"inline-block\",\n            height: \"125px\",\n            width: \"125px\",\n            backgroundColor: \"#bbb\"\n          },\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 63,\n            columnNumber: 13\n          }\n        }, __jsx(\"img\", {\n          style: {\n            display: \"none\"\n          },\n          key: el.src + index,\n          \"data-index\": el.index,\n          src: el.src,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 72,\n            columnNumber: 15\n          }\n        }));\n      }\n    }))\n  );\n}\n\nconst mapStateToProps = state => ({\n  numberOfPairs: state.numberOfPairs,\n  cards: state.cards,\n  gameState: state.gameState\n});\n\nconst mapDispatchToProps = dispatch => ({\n  shuffleCards: () => dispatch({\n    type: SHUFFLE\n  }),\n  limitCards: () => dispatch({\n    type: LIMIT_CARDS\n  }),\n  duplicateCards: () => dispatch({\n    type: DUPLICATE_CARDS\n  }),\n  resetCards: () => dispatch({\n    type: RESET_CARDS\n  })\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Grid); // ---------------------------------\n\nconst gridContainer = styled.div.withConfig({\n  displayName: \"Grid__gridContainer\",\n  componentId: \"v3z7jl-0\"\n})([\"width:520px;height:520px;margin:5px auto;\"]);","map":{"version":3,"sources":["C:/Users/chatb/Desktop/Code/nextJS/find-the-pair/components/Grid.jsx"],"names":["React","useEffect","connect","styled","LIMIT_CARDS","SHUFFLE","DUPLICATE_CARDS","RESET_CARDS","renderCards","gameState","props","cards","map","el","index","src","Grid","resetCards","shuffleCards","limitCards","duplicateCards","numberOfPairs","isActive","margin","display","height","width","backgroundColor","mapStateToProps","state","mapDispatchToProps","dispatch","type","gridContainer","div"],"mappings":"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","sourcesContent":["import React, { useEffect } from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport styled from \"styled-components\";\r\nimport {\r\n  LIMIT_CARDS,\r\n  SHUFFLE,\r\n  DUPLICATE_CARDS,\r\n  RESET_CARDS,\r\n} from \"../redux/constants/action-types\";\r\n\r\nfunction renderCards(gameState) {\r\n  if (gameState === \"loading\") {\r\n    return props.cards.map((el, index) => {\r\n      return (\r\n        <img\r\n          className=\"testing\"\r\n          key={el.src + index}\r\n          width=\"125\"\r\n          height=\"125\"\r\n          src={el.src}\r\n        />\r\n      );\r\n    });\r\n  } else if (gameState === \"playing\") {\r\n    return props.cards.map((el, index) => {\r\n      return <div>1</div>;\r\n    });\r\n  }\r\n}\r\nfunction Grid(props) {\r\n  useEffect(() => {\r\n    props.resetCards();\r\n    props.shuffleCards();\r\n    props.limitCards();\r\n    props.duplicateCards();\r\n    props.shuffleCards();\r\n  }, [props.numberOfPairs]);\r\n\r\n  return (\r\n    //   grid Item\r\n    <gridContainer>\r\n      {props.cards.map((el, index) => {\r\n        if (el.isActive) {\r\n          return (\r\n            <div\r\n              style={{\r\n                margin: \"0 1px\",\r\n                display: \"inline-block\",\r\n                height: \"125px\",\r\n                width: \"125px\",\r\n                backgroundColor: \"#bbb\",\r\n              }}\r\n            >\r\n              <img\r\n                key={el.src + index}\r\n                data-index={el.index}\r\n                src={el.src}\r\n              />\r\n            </div>\r\n          );\r\n        } else {\r\n          return (\r\n            <div\r\n              style={{\r\n                margin: \"0 1px\",\r\n                display: \"inline-block\",\r\n                height: \"125px\",\r\n                width: \"125px\",\r\n                backgroundColor: \"#bbb\",\r\n              }}\r\n            >\r\n              <img\r\n                style={{ display: \"none\" }}\r\n                key={el.src + index}\r\n                data-index={el.index}\r\n                src={el.src}\r\n              />\r\n            </div>\r\n          );\r\n        }\r\n      })}\r\n    </gridContainer>\r\n  );\r\n}\r\n\r\nconst mapStateToProps = (state) => ({\r\n  numberOfPairs: state.numberOfPairs,\r\n  cards: state.cards,\r\n  gameState: state.gameState,\r\n});\r\n\r\nconst mapDispatchToProps = (dispatch) => ({\r\n  shuffleCards: () => dispatch({ type: SHUFFLE }),\r\n  limitCards: () => dispatch({ type: LIMIT_CARDS }),\r\n  duplicateCards: () => dispatch({ type: DUPLICATE_CARDS }),\r\n  resetCards: () => dispatch({ type: RESET_CARDS }),\r\n});\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Grid);\r\n\r\n// ---------------------------------\r\nconst gridContainer = styled.div`\r\n  width: 520px;\r\n  height: 520px;\r\n  margin: 5px auto;\r\n`;\r\n"]},"metadata":{},"sourceType":"module"}