{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\chatb\\\\Desktop\\\\Code\\\\nextJS\\\\find-the-pair\\\\components\\\\Grid.jsx\";\nvar __jsx = React.createElement;\nimport React, { useEffect } from \"react\";\nimport { connect } from \"react-redux\";\nimport styled from \"styled-components\";\nimport { LIMIT_CARDS, SHUFFLE, DUPLICATE_CARDS, RESET_CARDS, FLIP_ALL_CARDS, FLIP_CARD } from \"../redux/constants/action-types\";\nimport { flipCard } from \"../redux/actions/index\";\n\nfunction Grid(props) {\n  useEffect(() => {\n    props.resetCards();\n    props.shuffleCards();\n    props.limitCards();\n    props.duplicateCards();\n    props.shuffleCards();\n    setTimeout(() => {\n      props.flipAllCards();\n    }, 1500);\n  }, [props.numberOfPairs]);\n  useEffect(() => {\n    if (props.matching) {\n      setTimeout(() => {\n        props.flipAllCards();\n      }, 1000);\n    }\n  }, [props.matching]);\n  useEffect(() => {\n    if (props.numberOfFoundPairs === props.numberOfPairs) {\n      setTimeout(() => {\n        alert(\"YOU WIN \");\n      }, 500);\n    }\n  }, [props.numberOfFoundPairs]);\n  return (//   grid Item\n    __jsx(GridContainer, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 46,\n        columnNumber: 5\n      }\n    }, props.cards.map((el, index) => {\n      // matching  and isActive\n      // matching and notActive\n      if (el.isActive || el.timed) {\n        return __jsx(ImageWrapper, {\n          color: \"#bbb\",\n          width: props.width,\n          key: \"div\" + index,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 52,\n            columnNumber: 13\n          }\n        }, __jsx(\"img\", {\n          key: el.src + index,\n          \"data-index\": el.index,\n          src: el.src,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 53,\n            columnNumber: 15\n          }\n        }));\n      } else if (el.match) {\n        return __jsx(ImageWrapper, {\n          color: \"transparent\",\n          width: props.width,\n          key: \"div\" + index,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 58,\n            columnNumber: 13\n          }\n        });\n      } else {\n        return __jsx(ImageWrapper, {\n          color: \"#bbb\",\n          width: props.width,\n          key: \"div\" + index,\n          onClick: () => {\n            if (!props.matching) {\n              props.flipCard(el.index);\n            }\n          },\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 66,\n            columnNumber: 13\n          }\n        });\n      }\n    }))\n  );\n}\n\nconst mapStateToProps = state => ({\n  numberOfPairs: state.numberOfPairs,\n  numberOfAttempts: state.numberOfAttempts,\n  numberOfFoundPairs: state.numberOfFoundPairs,\n  cards: state.cards,\n  clickCounter: state.clickCounter,\n  matching: state.matching,\n  width: state.width,\n  matching: state.matching\n});\n\nconst mapDispatchToProps = dispatch => ({\n  shuffleCards: () => dispatch({\n    type: SHUFFLE\n  }),\n  limitCards: () => dispatch({\n    type: LIMIT_CARDS\n  }),\n  duplicateCards: () => dispatch({\n    type: DUPLICATE_CARDS\n  }),\n  resetCards: () => dispatch({\n    type: RESET_CARDS\n  }),\n  flipAllCards: () => dispatch({\n    type: FLIP_ALL_CARDS\n  }),\n  flipCard: index => dispatch(flipCard(index))\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Grid); // ---------------------------------\n\nconst GridContainer = styled.div.withConfig({\n  displayName: \"Grid__GridContainer\",\n  componentId: \"v3z7jl-0\"\n})([\"width:520px;height:100vh;margin:0 auto;text-align:center;padding-top:5%;\"]);\nconst ImageWrapper = styled.div.withConfig({\n  displayName: \"Grid__ImageWrapper\",\n  componentId: \"v3z7jl-1\"\n})([\"display:inline-block;margin-right:1px;margin-top:2px;width:\", \";height:\", \";background-color:\", \";overflow:auto;img,.blank{width:\", \";height:\", \";padding:1px;transform:scaleY(-1) .;}\"], props => props.width + \"px\", props => props.width + \"px\", props => props.color, props => props.width + \"px\", props => props.width + \"px\");\nImageWrapper.defaultProps = {\n  width: 125\n};","map":{"version":3,"sources":["C:/Users/chatb/Desktop/Code/nextJS/find-the-pair/components/Grid.jsx"],"names":["React","useEffect","connect","styled","LIMIT_CARDS","SHUFFLE","DUPLICATE_CARDS","RESET_CARDS","FLIP_ALL_CARDS","FLIP_CARD","flipCard","Grid","props","resetCards","shuffleCards","limitCards","duplicateCards","setTimeout","flipAllCards","numberOfPairs","matching","numberOfFoundPairs","alert","cards","map","el","index","isActive","timed","width","src","match","mapStateToProps","state","numberOfAttempts","clickCounter","mapDispatchToProps","dispatch","type","GridContainer","div","ImageWrapper","color","defaultProps"],"mappings":"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","sourcesContent":["import React, { useEffect } from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport styled from \"styled-components\";\r\nimport {\r\n  LIMIT_CARDS,\r\n  SHUFFLE,\r\n  DUPLICATE_CARDS,\r\n  RESET_CARDS,\r\n  FLIP_ALL_CARDS,\r\n  FLIP_CARD,\r\n} from \"../redux/constants/action-types\";\r\n\r\nimport { flipCard } from \"../redux/actions/index\";\r\n\r\nfunction Grid(props) {\r\n  useEffect(() => {\r\n    props.resetCards();\r\n    props.shuffleCards();\r\n    props.limitCards();\r\n    props.duplicateCards();\r\n    props.shuffleCards();\r\n\r\n    setTimeout(() => {\r\n      props.flipAllCards();\r\n    }, 1500);\r\n  }, [props.numberOfPairs]);\r\n\r\n  useEffect(() => {\r\n    if (props.matching) {\r\n      setTimeout(() => {\r\n        props.flipAllCards();\r\n      }, 1000);\r\n    }\r\n  }, [props.matching]);\r\n\r\n  useEffect(() => {\r\n    if (props.numberOfFoundPairs === props.numberOfPairs) {\r\n      setTimeout(() => {\r\n        alert(\"YOU WIN \");\r\n      }, 500);\r\n    }\r\n  }, [props.numberOfFoundPairs]);\r\n\r\n  return (\r\n    //   grid Item\r\n    <GridContainer>\r\n      {props.cards.map((el, index) => {\r\n        // matching  and isActive\r\n        // matching and notActive\r\n        if (el.isActive || el.timed) {\r\n          return (\r\n            <ImageWrapper color=\"#bbb\" width={props.width} key={\"div\" + index}>\r\n              <img key={el.src + index} data-index={el.index} src={el.src} />\r\n            </ImageWrapper>\r\n          );\r\n        } else if (el.match) {\r\n          return (\r\n            <ImageWrapper\r\n              color=\"transparent\"\r\n              width={props.width}\r\n              key={\"div\" + index}\r\n            />\r\n          );\r\n        } else {\r\n          return (\r\n            <ImageWrapper\r\n              color=\"#bbb\"\r\n              width={props.width}\r\n              key={\"div\" + index}\r\n              onClick={() => {\r\n                if (!props.matching) {\r\n                  props.flipCard(el.index);\r\n                }\r\n              }}\r\n            />\r\n          );\r\n        }\r\n      })}\r\n    </GridContainer>\r\n  );\r\n}\r\n\r\nconst mapStateToProps = (state) => ({\r\n  numberOfPairs: state.numberOfPairs,\r\n  numberOfAttempts: state.numberOfAttempts,\r\n  numberOfFoundPairs: state.numberOfFoundPairs,\r\n  cards: state.cards,\r\n  clickCounter: state.clickCounter,\r\n  matching: state.matching,\r\n  width: state.width,\r\n  matching: state.matching,\r\n});\r\n\r\nconst mapDispatchToProps = (dispatch) => ({\r\n  shuffleCards: () => dispatch({ type: SHUFFLE }),\r\n  limitCards: () => dispatch({ type: LIMIT_CARDS }),\r\n  duplicateCards: () => dispatch({ type: DUPLICATE_CARDS }),\r\n  resetCards: () => dispatch({ type: RESET_CARDS }),\r\n  flipAllCards: () => dispatch({ type: FLIP_ALL_CARDS }),\r\n  flipCard: (index) => dispatch(flipCard(index)),\r\n});\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Grid);\r\n\r\n// ---------------------------------\r\nconst GridContainer = styled.div`\r\n  width: 520px;\r\n  height: 100vh;\r\n  margin: 0 auto;\r\n  text-align: center;\r\n  padding-top: 5%;\r\n`;\r\n\r\nconst ImageWrapper = styled.div`\r\n  display: inline-block;\r\n  margin-right: 1px;\r\n  margin-top: 2px;\r\n  width: ${(props) => props.width + \"px\"};\r\n  height: ${(props) => props.width + \"px\"};\r\n  background-color: ${(props) => props.color};\r\n\r\n  overflow: auto;\r\n\r\n  img,\r\n  .blank {\r\n    width: ${(props) => props.width + \"px\"};\r\n    height: ${(props) => props.width + \"px\"};\r\n    padding: 1px;\r\n    transform: scaleY(-1) .;\r\n  }\r\n`;\r\n\r\nImageWrapper.defaultProps = {\r\n  width: 125,\r\n};\r\n"]},"metadata":{},"sourceType":"module"}