{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { ADD_ARTICLE } from \"../constants/action-types\";\nimport { HYDRATE } from \"next-redux-wrapper\";\nconst initialState = {\n  articles: [{\n    author: \"author 1 \",\n    title: \"title 1\",\n    text: \"text 1\"\n  }, {\n    author: \"author 2 \",\n    title: \"title 2\",\n    text: \"text 2\"\n  }]\n};\n\nfunction rootReducer(state = initialState, action) {\n  switch (action.type) {\n    case HYDRATE:\n      return _objectSpread(_objectSpread({}, state), action.payload);\n\n    case ADD_ARTICLE:\n      return Object.assign({}, state, {\n        articles: state.articles.concat(action.payload)\n      });\n\n    default:\n      return state;\n  }\n}\n\nexport default rootReducer;","map":{"version":3,"sources":["C:/Users/chatb/Desktop/Code/nextJS/find-the-pair/redux/reducers/index.js"],"names":["ADD_ARTICLE","HYDRATE","initialState","articles","author","title","text","rootReducer","state","action","type","payload","Object","assign","concat"],"mappings":";;;;;;AAAA,SAASA,WAAT,QAA4B,2BAA5B;AACA,SAASC,OAAT,QAAwB,oBAAxB;AAEA,MAAMC,YAAY,GAAG;AACnBC,EAAAA,QAAQ,EAAE,CACR;AACEC,IAAAA,MAAM,EAAE,WADV;AAEEC,IAAAA,KAAK,EAAE,SAFT;AAGEC,IAAAA,IAAI,EAAE;AAHR,GADQ,EAMR;AACEF,IAAAA,MAAM,EAAE,WADV;AAEEC,IAAAA,KAAK,EAAE,SAFT;AAGEC,IAAAA,IAAI,EAAE;AAHR,GANQ;AADS,CAArB;;AAeA,SAASC,WAAT,CAAqBC,KAAK,GAAGN,YAA7B,EAA2CO,MAA3C,EAAmD;AACjD,UAAQA,MAAM,CAACC,IAAf;AACE,SAAKT,OAAL;AACE,6CAAYO,KAAZ,GAAsBC,MAAM,CAACE,OAA7B;;AACF,SAAKX,WAAL;AACE,aAAOY,MAAM,CAACC,MAAP,CAAc,EAAd,EAAkBL,KAAlB,EAAyB;AAC9BL,QAAAA,QAAQ,EAAEK,KAAK,CAACL,QAAN,CAAeW,MAAf,CAAsBL,MAAM,CAACE,OAA7B;AADoB,OAAzB,CAAP;;AAGF;AACE,aAAOH,KAAP;AARJ;AAUD;;AAED,eAAeD,WAAf","sourcesContent":["import { ADD_ARTICLE } from \"../constants/action-types\";\r\nimport { HYDRATE } from \"next-redux-wrapper\";\r\n\r\nconst initialState = {\r\n  articles: [\r\n    {\r\n      author: \"author 1 \",\r\n      title: \"title 1\",\r\n      text: \"text 1\",\r\n    },\r\n    {\r\n      author: \"author 2 \",\r\n      title: \"title 2\",\r\n      text: \"text 2\",\r\n    },\r\n  ],\r\n};\r\n\r\nfunction rootReducer(state = initialState, action) {\r\n  switch (action.type) {\r\n    case HYDRATE:\r\n      return { ...state, ...action.payload };\r\n    case ADD_ARTICLE:\r\n      return Object.assign({}, state, {\r\n        articles: state.articles.concat(action.payload),\r\n      });\r\n    default:\r\n      return state;\r\n  }\r\n}\r\n\r\nexport default rootReducer;\r\n"]},"metadata":{},"sourceType":"module"}