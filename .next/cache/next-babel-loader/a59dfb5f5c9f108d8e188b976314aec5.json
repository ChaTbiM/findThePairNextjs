{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\chatb\\\\Desktop\\\\Code\\\\nextJS\\\\find-the-pair\\\\components\\\\Grid.jsx\",\n    _s = $RefreshSig$();\n\nvar __jsx = React.createElement;\nimport React, { useEffect } from \"react\";\nimport { connect } from \"react-redux\";\nimport styled from \"styled-components\";\nimport { LIMIT_CARDS, SHUFFLE, DUPLICATE_CARDS, RESET_CARDS } from \"../redux/constants/action-types\";\n\nfunction renderCards(gameState) {\n  var _this = this;\n\n  if (gameState === \"loading\") {\n    return props.cards.map(function (el, index) {\n      return __jsx(\"img\", {\n        key: el.src + index,\n        width: \"125\",\n        height: \"125\",\n        src: el.src,\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 14,\n          columnNumber: 14\n        }\n      });\n    });\n  } else if (gameState === \"playing\") {\n    return props.cards.map(function (el, index) {\n      return __jsx(\"div\", {\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 18,\n          columnNumber: 14\n        }\n      }, \"1\");\n    });\n  }\n}\n\nfunction Grid(props) {\n  _s();\n\n  var _this2 = this;\n\n  useEffect(function () {\n    props.resetCards();\n    props.shuffleCards();\n    props.limitCards();\n    props.duplicateCards();\n    props.shuffleCards();\n    console.log(props.cards, \"final cards\");\n  }, [props.numberOfPairs]);\n  return (//   grid Item\n    __jsx(\"gridContainer\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 34,\n        columnNumber: 5\n      }\n    }, props.gameState === \"loading\" ? props.cards.map(function (el, index) {\n      return __jsx(\"img\", {\n        key: el.src + index,\n        \"data-index\": el.index,\n        width: \"125\",\n        height: \"125\",\n        src: el.src,\n        __self: _this2,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 38,\n          columnNumber: 15\n        }\n      });\n    }) : props.cards.map(function (el, index) {\n      return __jsx(\"div\", {\n        \"class\": \"card-blank\",\n        __self: _this2,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 48,\n          columnNumber: 20\n        }\n      }, \"2\");\n    }))\n  );\n}\n\n_s(Grid, \"OD7bBpZva5O2jO+Puf00hKivP7c=\");\n\n_c = Grid;\n\nvar mapStateToProps = function mapStateToProps(state) {\n  return {\n    numberOfPairs: state.numberOfPairs,\n    cards: state.cards,\n    gameState: state.gameState\n  };\n};\n\nvar mapDispatchToProps = function mapDispatchToProps(dispatch) {\n  return {\n    shuffleCards: function shuffleCards() {\n      return dispatch({\n        type: SHUFFLE\n      });\n    },\n    limitCards: function limitCards() {\n      return dispatch({\n        type: LIMIT_CARDS\n      });\n    },\n    duplicateCards: function duplicateCards() {\n      return dispatch({\n        type: DUPLICATE_CARDS\n      });\n    },\n    resetCards: function resetCards() {\n      return dispatch({\n        type: RESET_CARDS\n      });\n    }\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Grid); // ---------------------------------\n\nvar gridContainer = styled.div.withConfig({\n  displayName: \"Grid__gridContainer\",\n  componentId: \"v3z7jl-0\"\n})([\"width:520px;height:520px;margin:5px auto;\"]);\n\nvar _c;\n\n$RefreshReg$(_c, \"Grid\");","map":{"version":3,"sources":["C:/Users/chatb/Desktop/Code/nextJS/find-the-pair/components/Grid.jsx"],"names":["React","useEffect","connect","styled","LIMIT_CARDS","SHUFFLE","DUPLICATE_CARDS","RESET_CARDS","renderCards","gameState","props","cards","map","el","index","src","Grid","resetCards","shuffleCards","limitCards","duplicateCards","console","log","numberOfPairs","mapStateToProps","state","mapDispatchToProps","dispatch","type","gridContainer","div"],"mappings":"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","sourcesContent":["import React, { useEffect } from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport styled from \"styled-components\";\r\nimport {\r\n  LIMIT_CARDS,\r\n  SHUFFLE,\r\n  DUPLICATE_CARDS,\r\n  RESET_CARDS,\r\n} from \"../redux/constants/action-types\";\r\n\r\nfunction renderCards(gameState) {\r\n  if (gameState === \"loading\") {\r\n    return props.cards.map((el, index) => {\r\n      return <img key={el.src + index} width=\"125\" height=\"125\" src={el.src} />;\r\n    });\r\n  } else if (gameState === \"playing\") {\r\n    return props.cards.map((el, index) => {\r\n      return <div>1</div>;\r\n    });\r\n  }\r\n}\r\nfunction Grid(props) {\r\n  useEffect(() => {\r\n    props.resetCards();\r\n    props.shuffleCards();\r\n    props.limitCards();\r\n    props.duplicateCards();\r\n    props.shuffleCards();\r\n    console.log(props.cards, \"final cards\");\r\n  }, [props.numberOfPairs]);\r\n\r\n  return (\r\n    //   grid Item\r\n    <gridContainer>\r\n      {props.gameState === \"loading\"\r\n        ? props.cards.map((el, index) => {\r\n            return (\r\n              <img\r\n                key={el.src + index}\r\n                data-index={el.index}\r\n                width=\"125\"\r\n                height=\"125\"\r\n                src={el.src}\r\n              />\r\n            );\r\n          })\r\n        : props.cards.map((el, index) => {\r\n            return <div class=\"card-blank\">2</div>;\r\n          })}\r\n    </gridContainer>\r\n  );\r\n}\r\n\r\nconst mapStateToProps = (state) => ({\r\n  numberOfPairs: state.numberOfPairs,\r\n  cards: state.cards,\r\n  gameState: state.gameState,\r\n});\r\n\r\nconst mapDispatchToProps = (dispatch) => ({\r\n  shuffleCards: () => dispatch({ type: SHUFFLE }),\r\n  limitCards: () => dispatch({ type: LIMIT_CARDS }),\r\n  duplicateCards: () => dispatch({ type: DUPLICATE_CARDS }),\r\n  resetCards: () => dispatch({ type: RESET_CARDS }),\r\n});\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Grid);\r\n\r\n// ---------------------------------\r\nconst gridContainer = styled.div`\r\n  width: 520px;\r\n  height: 520px;\r\n  margin: 5px auto;\r\n`;\r\n"]},"metadata":{},"sourceType":"module"}