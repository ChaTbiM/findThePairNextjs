{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\chatb\\\\Desktop\\\\Code\\\\nextJS\\\\find-the-pair\\\\components\\\\Grid.jsx\",\n    _s = $RefreshSig$();\n\nvar __jsx = React.createElement;\nimport React, { useEffect } from \"react\";\nimport { connect } from \"react-redux\";\nimport styled from \"styled-components\";\nimport { LIMIT_CARDS, SHUFFLE, DUPLICATE_CARDS, RESET_CARDS } from \"../redux/constants/action-types\";\n\nfunction Grid(props) {\n  _s();\n\n  var _this = this;\n\n  useEffect(function () {\n    props.resetCards();\n    props.shuffleCards();\n    props.limitCards();\n    props.duplicateCards();\n    props.shuffleCards();\n  }, [props.numberOfPairs]);\n  return (//   grid Item\n    __jsx(\"gridContainer\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 22,\n        columnNumber: 5\n      }\n    }, props.cards.map(function (el, index) {\n      if (el.isActive) {\n        return __jsx(\"div\", {\n          style: {\n            margin: \"0 1px\",\n            display: \"inline-block\",\n            height: \"125px\",\n            width: \"125px\",\n            backgroundColor: \"#bbb\"\n          },\n          __self: _this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 26,\n            columnNumber: 13\n          }\n        }, __jsx(\"img\", {\n          key: el.src + index,\n          \"data-index\": el.index,\n          src: el.src,\n          __self: _this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 35,\n            columnNumber: 15\n          }\n        }));\n      } else {\n        return __jsx(\"div\", {\n          style: {\n            margin: \"0 1px\",\n            display: \"inline-block\",\n            height: \"125px\",\n            width: \"125px\",\n            backgroundColor: \"#bbb\"\n          },\n          __self: _this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 40,\n            columnNumber: 13\n          }\n        }, __jsx(\"img\", {\n          style: {\n            display: \"none\"\n          },\n          key: el.src + index,\n          \"data-index\": el.index,\n          src: el.src,\n          __self: _this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 49,\n            columnNumber: 15\n          }\n        }));\n      }\n    }))\n  );\n}\n\n_s(Grid, \"OD7bBpZva5O2jO+Puf00hKivP7c=\");\n\n_c = Grid;\n\nvar mapStateToProps = function mapStateToProps(state) {\n  return {\n    numberOfPairs: state.numberOfPairs,\n    cards: state.cards,\n    gameState: state.gameState\n  };\n};\n\nvar mapDispatchToProps = function mapDispatchToProps(dispatch) {\n  return {\n    shuffleCards: function shuffleCards() {\n      return dispatch({\n        type: SHUFFLE\n      });\n    },\n    limitCards: function limitCards() {\n      return dispatch({\n        type: LIMIT_CARDS\n      });\n    },\n    duplicateCards: function duplicateCards() {\n      return dispatch({\n        type: DUPLICATE_CARDS\n      });\n    },\n    resetCards: function resetCards() {\n      return dispatch({\n        type: RESET_CARDS\n      });\n    }\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Grid); // ---------------------------------\n\nvar gridContainer = styled.div.withConfig({\n  displayName: \"Grid__gridContainer\",\n  componentId: \"v3z7jl-0\"\n})([\"width:520px;height:520px;margin:5px auto;\"]);\n\nvar _c;\n\n$RefreshReg$(_c, \"Grid\");","map":{"version":3,"sources":["C:/Users/chatb/Desktop/Code/nextJS/find-the-pair/components/Grid.jsx"],"names":["React","useEffect","connect","styled","LIMIT_CARDS","SHUFFLE","DUPLICATE_CARDS","RESET_CARDS","Grid","props","resetCards","shuffleCards","limitCards","duplicateCards","numberOfPairs","cards","map","el","index","isActive","margin","display","height","width","backgroundColor","src","mapStateToProps","state","gameState","mapDispatchToProps","dispatch","type","gridContainer","div"],"mappings":";;;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,SAASC,OAAT,QAAwB,aAAxB;AACA,OAAOC,MAAP,MAAmB,mBAAnB;AACA,SACEC,WADF,EAEEC,OAFF,EAGEC,eAHF,EAIEC,WAJF,QAKO,iCALP;;AAOA,SAASC,IAAT,CAAcC,KAAd,EAAqB;AAAA;;AAAA;;AACnBR,EAAAA,SAAS,CAAC,YAAM;AACdQ,IAAAA,KAAK,CAACC,UAAN;AACAD,IAAAA,KAAK,CAACE,YAAN;AACAF,IAAAA,KAAK,CAACG,UAAN;AACAH,IAAAA,KAAK,CAACI,cAAN;AACAJ,IAAAA,KAAK,CAACE,YAAN;AACD,GANQ,EAMN,CAACF,KAAK,CAACK,aAAP,CANM,CAAT;AAQA,SACE;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACGL,KAAK,CAACM,KAAN,CAAYC,GAAZ,CAAgB,UAACC,EAAD,EAAKC,KAAL,EAAe;AAC9B,UAAID,EAAE,CAACE,QAAP,EAAiB;AACf,eACE;AACE,UAAA,KAAK,EAAE;AACLC,YAAAA,MAAM,EAAE,OADH;AAELC,YAAAA,OAAO,EAAE,cAFJ;AAGLC,YAAAA,MAAM,EAAE,OAHH;AAILC,YAAAA,KAAK,EAAE,OAJF;AAKLC,YAAAA,eAAe,EAAE;AALZ,WADT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WASE;AAAK,UAAA,GAAG,EAAEP,EAAE,CAACQ,GAAH,GAASP,KAAnB;AAA0B,wBAAYD,EAAE,CAACC,KAAzC;AAAgD,UAAA,GAAG,EAAED,EAAE,CAACQ,GAAxD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UATF,CADF;AAaD,OAdD,MAcO;AACL,eACE;AACE,UAAA,KAAK,EAAE;AACLL,YAAAA,MAAM,EAAE,OADH;AAELC,YAAAA,OAAO,EAAE,cAFJ;AAGLC,YAAAA,MAAM,EAAE,OAHH;AAILC,YAAAA,KAAK,EAAE,OAJF;AAKLC,YAAAA,eAAe,EAAE;AALZ,WADT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WASE;AACE,UAAA,KAAK,EAAE;AAAEH,YAAAA,OAAO,EAAE;AAAX,WADT;AAEE,UAAA,GAAG,EAAEJ,EAAE,CAACQ,GAAH,GAASP,KAFhB;AAGE,wBAAYD,EAAE,CAACC,KAHjB;AAIE,UAAA,GAAG,EAAED,EAAE,CAACQ,GAJV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UATF,CADF;AAkBD;AACF,KAnCA,CADH;AAFF;AAyCD;;GAlDQjB,I;;KAAAA,I;;AAoDT,IAAMkB,eAAe,GAAG,SAAlBA,eAAkB,CAACC,KAAD;AAAA,SAAY;AAClCb,IAAAA,aAAa,EAAEa,KAAK,CAACb,aADa;AAElCC,IAAAA,KAAK,EAAEY,KAAK,CAACZ,KAFqB;AAGlCa,IAAAA,SAAS,EAAED,KAAK,CAACC;AAHiB,GAAZ;AAAA,CAAxB;;AAMA,IAAMC,kBAAkB,GAAG,SAArBA,kBAAqB,CAACC,QAAD;AAAA,SAAe;AACxCnB,IAAAA,YAAY,EAAE;AAAA,aAAMmB,QAAQ,CAAC;AAAEC,QAAAA,IAAI,EAAE1B;AAAR,OAAD,CAAd;AAAA,KAD0B;AAExCO,IAAAA,UAAU,EAAE;AAAA,aAAMkB,QAAQ,CAAC;AAAEC,QAAAA,IAAI,EAAE3B;AAAR,OAAD,CAAd;AAAA,KAF4B;AAGxCS,IAAAA,cAAc,EAAE;AAAA,aAAMiB,QAAQ,CAAC;AAAEC,QAAAA,IAAI,EAAEzB;AAAR,OAAD,CAAd;AAAA,KAHwB;AAIxCI,IAAAA,UAAU,EAAE;AAAA,aAAMoB,QAAQ,CAAC;AAAEC,QAAAA,IAAI,EAAExB;AAAR,OAAD,CAAd;AAAA;AAJ4B,GAAf;AAAA,CAA3B;;AAOA,eAAeL,OAAO,CAACwB,eAAD,EAAkBG,kBAAlB,CAAP,CAA6CrB,IAA7C,CAAf,C,CAEA;;AACA,IAAMwB,aAAa,GAAG7B,MAAM,CAAC8B,GAAV;AAAA;AAAA;AAAA,iDAAnB","sourcesContent":["import React, { useEffect } from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport styled from \"styled-components\";\r\nimport {\r\n  LIMIT_CARDS,\r\n  SHUFFLE,\r\n  DUPLICATE_CARDS,\r\n  RESET_CARDS,\r\n} from \"../redux/constants/action-types\";\r\n\r\nfunction Grid(props) {\r\n  useEffect(() => {\r\n    props.resetCards();\r\n    props.shuffleCards();\r\n    props.limitCards();\r\n    props.duplicateCards();\r\n    props.shuffleCards();\r\n  }, [props.numberOfPairs]);\r\n\r\n  return (\r\n    //   grid Item\r\n    <gridContainer>\r\n      {props.cards.map((el, index) => {\r\n        if (el.isActive) {\r\n          return (\r\n            <div\r\n              style={{\r\n                margin: \"0 1px\",\r\n                display: \"inline-block\",\r\n                height: \"125px\",\r\n                width: \"125px\",\r\n                backgroundColor: \"#bbb\",\r\n              }}\r\n            >\r\n              <img key={el.src + index} data-index={el.index} src={el.src} />\r\n            </div>\r\n          );\r\n        } else {\r\n          return (\r\n            <div\r\n              style={{\r\n                margin: \"0 1px\",\r\n                display: \"inline-block\",\r\n                height: \"125px\",\r\n                width: \"125px\",\r\n                backgroundColor: \"#bbb\",\r\n              }}\r\n            >\r\n              <img\r\n                style={{ display: \"none\" }}\r\n                key={el.src + index}\r\n                data-index={el.index}\r\n                src={el.src}\r\n              />\r\n            </div>\r\n          );\r\n        }\r\n      })}\r\n    </gridContainer>\r\n  );\r\n}\r\n\r\nconst mapStateToProps = (state) => ({\r\n  numberOfPairs: state.numberOfPairs,\r\n  cards: state.cards,\r\n  gameState: state.gameState,\r\n});\r\n\r\nconst mapDispatchToProps = (dispatch) => ({\r\n  shuffleCards: () => dispatch({ type: SHUFFLE }),\r\n  limitCards: () => dispatch({ type: LIMIT_CARDS }),\r\n  duplicateCards: () => dispatch({ type: DUPLICATE_CARDS }),\r\n  resetCards: () => dispatch({ type: RESET_CARDS }),\r\n});\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Grid);\r\n\r\n// ---------------------------------\r\nconst gridContainer = styled.div`\r\n  width: 520px;\r\n  height: 520px;\r\n  margin: 5px auto;\r\n`;\r\n"]},"metadata":{},"sourceType":"module"}