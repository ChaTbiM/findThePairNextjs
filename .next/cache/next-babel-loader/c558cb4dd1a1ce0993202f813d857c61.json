{"ast":null,"code":"import _toConsumableArray from \"@babel/runtime/helpers/esm/toConsumableArray\";\nimport _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport { CHANGE_NUMBER_OF_PAIRS, SHUFFLE, LIMIT_CARDS, DUPLICATE_CARDS, RESET_CARDS, START_GAME, FLIP_ALL_CARDS, FLIP_CARD } from \"../constants/action-types\";\nimport { HYDRATE } from \"next-redux-wrapper\";\nimport { flipCard } from \"../actions\";\n\nvar clone = require(\"rfdc\")();\n\nvar initialState = {\n  numberOfPairs: 6,\n  width: 73,\n  clickCounter: 0,\n  matching: false,\n  matchingCard: null,\n  cards: [{\n    src: \"/images/animals-bunny.jpg\",\n    isActive: false\n  }, {\n    src: \"/images/animals-cat.jpg\",\n    isActive: false\n  }, {\n    src: \"/images/animals-cat-2.jpg\",\n    isActive: false\n  }, {\n    src: \"/images/animals-dog.jpg\",\n    isActive: false\n  }, {\n    src: \"/images/animals-dog-2.jpg\",\n    isActive: false\n  }, {\n    src: \"/images/animals-horse.jpg\",\n    isActive: false\n  }, {\n    src: \"/images/animals-horse-2.jpg\",\n    isActive: false\n  }, {\n    src: \"/images/architecture-london-towerbridge.jpg\",\n    isActive: false\n  }, {\n    src: \"/images/architecture-moscow-redsquare.jpg\",\n    isActive: false\n  }, {\n    src: \"/images/architecture-nederlanden.jpg\",\n    isActive: false\n  }, {\n    src: \"/images/architecture-newyork-publiclibrary.jpg\",\n    isActive: false\n  }, {\n    src: \"/images/architecture-paris-eiffeltower.jpg\",\n    isActive: false\n  }, {\n    src: \"/images/cities-tokyo-night.jpg\",\n    isActive: false\n  }, {\n    src: \"/images/flowers-reddahlia.jpg\",\n    isActive: false\n  }, {\n    src: \"/images/flowers-waterlillies.jpg\",\n    isActive: false\n  }, {\n    src: \"/images/flowers-windclock.jpg\",\n    isActive: false\n  }, {\n    src: \"/images/landscape-1.jpg\",\n    isActive: false\n  }, {\n    src: \"/images/landscape-2.jpg\",\n    isActive: false\n  }, {\n    src: \"/images/landscape-2.jpg\",\n    isActive: false\n  }, {\n    src: \"/images/landscape-netherlands-deurningen.jpg\",\n    isActive: false\n  }, {\n    src: \"/images/landscape-us-edgewood.jpg\",\n    isActive: false\n  }]\n};\n\nfunction rootReducer() {\n  var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : initialState;\n  var action = arguments.length > 1 ? arguments[1] : undefined;\n\n  switch (action.type) {\n    case HYDRATE:\n      return _objectSpread(_objectSpread({}, state), action.payload);\n      break;\n\n    case CHANGE_NUMBER_OF_PAIRS:\n      return Object.assign({}, state, {\n        numberOfPairs: action.payload\n      });\n      break;\n\n    case START_GAME:\n      return Object.assign({}, state, {\n        gameState: \"playing\"\n      });\n      break;\n\n    case RESET_CARDS:\n      var initialCards = initialState.cards;\n      return Object.assign({}, state, {\n        cards: initialCards\n      });\n      break;\n\n    case SHUFFLE:\n      var array = state.cards;\n      var len = array.length - 1;\n\n      for (var i = len; i > 0; i--) {\n        var j = Math.floor(Math.random() * i);\n        var temp = array[i];\n        array[i] = array[j];\n        array[j] = temp;\n      }\n\n      return Object.assign({}, state, {\n        cards: _toConsumableArray(array)\n      });\n      break;\n\n    case LIMIT_CARDS:\n      var limitedCards = state.cards;\n      limitedCards.splice(state.numberOfPairs);\n      return Object.assign({}, state, {\n        cards: _toConsumableArray(limitedCards)\n      });\n      break;\n\n    case DUPLICATE_CARDS:\n      var duplicatedCards1 = clone(state.cards);\n      var duplicatedCards2 = clone(state.cards);\n      var newDuplicatedCards = [].concat(_toConsumableArray(duplicatedCards1), _toConsumableArray(duplicatedCards2));\n      newDuplicatedCards.forEach(function (el, index) {\n        el.index = index;\n        el.isActive = true;\n        el.match = false;\n      });\n      return Object.assign({}, state, {\n        cards: newDuplicatedCards\n      });\n      break;\n\n    case FLIP_ALL_CARDS:\n      var flipedCards = state.cards;\n      flipedCards.forEach(function (el, index) {\n        if (el.match === false) {\n          el.isActive = false;\n        }\n      });\n      return Object.assign({}, state, {\n        cards: _toConsumableArray(flipedCards),\n        matching: false\n      });\n\n    case FLIP_CARD:\n      var flippedCardIndex = state.cards.findIndex(function (el) {\n        return el.index === action.payload;\n      });\n      var allCards = clone(state.cards); // flip first card and remember it\n\n      if (state.clickCounter === 0) {\n        var newCounter = state.clickCounter;\n        newCounter++;\n\n        var _allCards = clone(state.cards);\n\n        _allCards.forEach(function (el) {\n          if (el.index === action.payload) {\n            el.isActive = true;\n          }\n        });\n\n        var firstFlippedCard = _allCards[flippedCardIndex];\n        return Object.assign({}, state, {\n          cards: _toConsumableArray(_allCards),\n          clickCounter: newCounter,\n          matchingCard: firstFlippedCard\n        });\n      } else if (state.clickCounter === 1) {\n        var _newCounter = 0;\n        allCards.forEach(function (el) {\n          if (el.src === state.matchingCard.src) {\n            el.match = true, el.isActive = true;\n          }\n        });\n        return Object.assign({}, state, {\n          cards: _toConsumableArray(allCards),\n          clickCounter: _newCounter\n        });\n      } // flip second card and change match:true for both\n\n\n      break;\n\n    default:\n      return state;\n  }\n}\n\nexport default rootReducer; // for(let i = array.length â€” 1; i > 0; i--){\n//   const j = Math.floor(Math.random() * i)\n//   const temp = array[i]\n//   array[i] = array[j]\n//   array[j] = temp\n// }","map":{"version":3,"sources":["C:/Users/chatb/Desktop/Code/nextJS/find-the-pair/redux/reducers/index.js"],"names":["CHANGE_NUMBER_OF_PAIRS","SHUFFLE","LIMIT_CARDS","DUPLICATE_CARDS","RESET_CARDS","START_GAME","FLIP_ALL_CARDS","FLIP_CARD","HYDRATE","flipCard","clone","require","initialState","numberOfPairs","width","clickCounter","matching","matchingCard","cards","src","isActive","rootReducer","state","action","type","payload","Object","assign","gameState","initialCards","array","len","length","i","j","Math","floor","random","temp","limitedCards","splice","duplicatedCards1","duplicatedCards2","newDuplicatedCards","forEach","el","index","match","flipedCards","flippedCardIndex","findIndex","allCards","newCounter","firstFlippedCard"],"mappings":"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","sourcesContent":["import {\r\n  CHANGE_NUMBER_OF_PAIRS,\r\n  SHUFFLE,\r\n  LIMIT_CARDS,\r\n  DUPLICATE_CARDS,\r\n  RESET_CARDS,\r\n  START_GAME,\r\n  FLIP_ALL_CARDS,\r\n  FLIP_CARD,\r\n} from \"../constants/action-types\";\r\nimport { HYDRATE } from \"next-redux-wrapper\";\r\nimport { flipCard } from \"../actions\";\r\n\r\nconst clone = require(\"rfdc\")();\r\n\r\nconst initialState = {\r\n  numberOfPairs: 6,\r\n  width: 73,\r\n  clickCounter: 0,\r\n  matching: false,\r\n  matchingCard: null,\r\n  cards: [\r\n    {\r\n      src: \"/images/animals-bunny.jpg\",\r\n      isActive: false,\r\n    },\r\n    {\r\n      src: \"/images/animals-cat.jpg\",\r\n      isActive: false,\r\n    },\r\n    {\r\n      src: \"/images/animals-cat-2.jpg\",\r\n      isActive: false,\r\n    },\r\n    {\r\n      src: \"/images/animals-dog.jpg\",\r\n      isActive: false,\r\n    },\r\n    {\r\n      src: \"/images/animals-dog-2.jpg\",\r\n      isActive: false,\r\n    },\r\n    {\r\n      src: \"/images/animals-horse.jpg\",\r\n      isActive: false,\r\n    },\r\n    {\r\n      src: \"/images/animals-horse-2.jpg\",\r\n      isActive: false,\r\n    },\r\n    {\r\n      src: \"/images/architecture-london-towerbridge.jpg\",\r\n      isActive: false,\r\n    },\r\n    {\r\n      src: \"/images/architecture-moscow-redsquare.jpg\",\r\n      isActive: false,\r\n    },\r\n    {\r\n      src: \"/images/architecture-nederlanden.jpg\",\r\n      isActive: false,\r\n    },\r\n    {\r\n      src: \"/images/architecture-newyork-publiclibrary.jpg\",\r\n      isActive: false,\r\n    },\r\n    {\r\n      src: \"/images/architecture-paris-eiffeltower.jpg\",\r\n      isActive: false,\r\n    },\r\n    {\r\n      src: \"/images/cities-tokyo-night.jpg\",\r\n      isActive: false,\r\n    },\r\n    {\r\n      src: \"/images/flowers-reddahlia.jpg\",\r\n      isActive: false,\r\n    },\r\n    {\r\n      src: \"/images/flowers-waterlillies.jpg\",\r\n      isActive: false,\r\n    },\r\n    {\r\n      src: \"/images/flowers-windclock.jpg\",\r\n      isActive: false,\r\n    },\r\n    {\r\n      src: \"/images/landscape-1.jpg\",\r\n      isActive: false,\r\n    },\r\n    {\r\n      src: \"/images/landscape-2.jpg\",\r\n      isActive: false,\r\n    },\r\n    {\r\n      src: \"/images/landscape-2.jpg\",\r\n      isActive: false,\r\n    },\r\n    {\r\n      src: \"/images/landscape-netherlands-deurningen.jpg\",\r\n      isActive: false,\r\n    },\r\n    {\r\n      src: \"/images/landscape-us-edgewood.jpg\",\r\n      isActive: false,\r\n    },\r\n  ],\r\n};\r\n\r\nfunction rootReducer(state = initialState, action) {\r\n  switch (action.type) {\r\n    case HYDRATE:\r\n      return { ...state, ...action.payload };\r\n      break;\r\n    case CHANGE_NUMBER_OF_PAIRS:\r\n      return Object.assign({}, state, {\r\n        numberOfPairs: action.payload,\r\n      });\r\n      break;\r\n    case START_GAME:\r\n      return Object.assign({}, state, { gameState: \"playing\" });\r\n      break;\r\n    case RESET_CARDS:\r\n      let initialCards = initialState.cards;\r\n\r\n      return Object.assign({}, state, { cards: initialCards });\r\n      break;\r\n    case SHUFFLE:\r\n      let array = state.cards;\r\n      let len = array.length - 1;\r\n      for (let i = len; i > 0; i--) {\r\n        const j = Math.floor(Math.random() * i);\r\n        const temp = array[i];\r\n        array[i] = array[j];\r\n        array[j] = temp;\r\n      }\r\n      return Object.assign({}, state, { cards: [...array] });\r\n      break;\r\n    case LIMIT_CARDS:\r\n      let limitedCards = state.cards;\r\n\r\n      limitedCards.splice(state.numberOfPairs);\r\n\r\n      return Object.assign({}, state, { cards: [...limitedCards] });\r\n      break;\r\n    case DUPLICATE_CARDS:\r\n      let duplicatedCards1 = clone(state.cards);\r\n      let duplicatedCards2 = clone(state.cards);\r\n\r\n      let newDuplicatedCards = [...duplicatedCards1, ...duplicatedCards2];\r\n      newDuplicatedCards.forEach((el, index) => {\r\n        el.index = index;\r\n        el.isActive = true;\r\n        el.match = false;\r\n      });\r\n\r\n      return Object.assign({}, state, {\r\n        cards: newDuplicatedCards,\r\n      });\r\n      break;\r\n    case FLIP_ALL_CARDS:\r\n      let flipedCards = state.cards;\r\n      flipedCards.forEach((el, index) => {\r\n        if (el.match === false) {\r\n          el.isActive = false;\r\n        }\r\n      });\r\n      return Object.assign({}, state, {\r\n        cards: [...flipedCards],\r\n        matching: false,\r\n      });\r\n    case FLIP_CARD:\r\n      let flippedCardIndex = state.cards.findIndex(\r\n        (el) => el.index === action.payload\r\n      );\r\n      let allCards = clone(state.cards);\r\n      // flip first card and remember it\r\n      if (state.clickCounter === 0) {\r\n        let newCounter = state.clickCounter;\r\n        newCounter++;\r\n\r\n        let allCards = clone(state.cards);\r\n\r\n        allCards.forEach((el) => {\r\n          if (el.index === action.payload) {\r\n            el.isActive = true;\r\n          }\r\n        });\r\n\r\n        let firstFlippedCard = allCards[flippedCardIndex];\r\n        return Object.assign({}, state, {\r\n          cards: [...allCards],\r\n          clickCounter: newCounter,\r\n          matchingCard: firstFlippedCard,\r\n        });\r\n      } else if (state.clickCounter === 1) {\r\n        let newCounter = 0;\r\n\r\n        allCards.forEach((el) => {\r\n          if (el.src === state.matchingCard.src) {\r\n            (el.match = true), (el.isActive = true);\r\n          }\r\n        });\r\n        return Object.assign({}, state, {\r\n          cards: [...allCards],\r\n          clickCounter: newCounter,\r\n        });\r\n      }\r\n\r\n      // flip second card and change match:true for both\r\n\r\n      break;\r\n    default:\r\n      return state;\r\n  }\r\n}\r\n\r\nexport default rootReducer;\r\n\r\n// for(let i = array.length â€” 1; i > 0; i--){\r\n//   const j = Math.floor(Math.random() * i)\r\n//   const temp = array[i]\r\n//   array[i] = array[j]\r\n//   array[j] = temp\r\n// }\r\n"]},"metadata":{},"sourceType":"module"}