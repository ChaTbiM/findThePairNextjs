{"ast":null,"code":"import _toConsumableArray from \"@babel/runtime/helpers/esm/toConsumableArray\";\nimport _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport { CHANGE_NUMBER_OF_PAIRS, SHUFFLE, LIMIT_CARDS, DUPLICATE_CARDS, RESET_CARDS, START_GAME, FLIP_ALL_CARDS, FLIP_CARD, CHANGE_WIDTH } from \"../constants/action-types\";\nimport { HYDRATE } from \"next-redux-wrapper\";\nimport { flipCard } from \"../actions\";\n\nvar clone = require(\"rfdc\")();\n\nvar initialState = {\n  width: 127,\n  numberOfPairs: 6,\n  numberOfFoundPairs: 0,\n  numberOfAttempts: 0,\n  isLoading: true,\n  isPlaying: false,\n  clickCounter: 0,\n  matching: false,\n  matchingCard: null,\n  cards: [{\n    src: \"/images/animals-bunny.jpg\",\n    isActive: false\n  }, {\n    src: \"/images/animals-cat.jpg\",\n    isActive: false\n  }, {\n    src: \"/images/animals-cat-2.jpg\",\n    isActive: false\n  }, {\n    src: \"/images/animals-dog.jpg\",\n    isActive: false\n  }, {\n    src: \"/images/animals-dog-2.jpg\",\n    isActive: false\n  }, {\n    src: \"/images/animals-horse.jpg\",\n    isActive: false\n  }, {\n    src: \"/images/animals-horse-2.jpg\",\n    isActive: false\n  }, {\n    src: \"/images/architecture-london-towerbridge.jpg\",\n    isActive: false\n  }, {\n    src: \"/images/architecture-moscow-redsquare.jpg\",\n    isActive: false\n  }, {\n    src: \"/images/architecture-nederlanden.jpg\",\n    isActive: false\n  }, {\n    src: \"/images/architecture-newyork-publiclibrary.jpg\",\n    isActive: false\n  }, {\n    src: \"/images/architecture-paris-eiffeltower.jpg\",\n    isActive: false\n  }, {\n    src: \"/images/cities-tokyo-night.jpg\",\n    isActive: false\n  }, {\n    src: \"/images/flowers-reddahlia.jpg\",\n    isActive: false\n  }, {\n    src: \"/images/flowers-waterlillies.jpg\",\n    isActive: false\n  }, {\n    src: \"/images/flowers-windclock.jpg\",\n    isActive: false\n  }, {\n    src: \"/images/landscape-1.jpg\",\n    isActive: false\n  }, {\n    src: \"/images/landscape-2.jpg\",\n    isActive: false\n  }, {\n    src: \"/images/landscape-2.jpg\",\n    isActive: false\n  }, {\n    src: \"/images/landscape-netherlands-deurningen.jpg\",\n    isActive: false\n  }, {\n    src: \"/images/landscape-us-edgewood.jpg\",\n    isActive: false\n  }]\n};\n\nfunction rootReducer() {\n  var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : initialState;\n  var action = arguments.length > 1 ? arguments[1] : undefined;\n\n  switch (action.type) {\n    case HYDRATE:\n      return _objectSpread(_objectSpread({}, state), action.payload);\n      break;\n\n    case CHANGE_NUMBER_OF_PAIRS:\n      var numberOfPairs = action.payload;\n      return Object.assign({}, state, {\n        numberOfPairs: numberOfPairs\n      });\n      break;\n\n    case CHANGE_WIDTH:\n      var width = action.payload;\n      return Object.assign({}, state, {\n        width: width\n      });\n      break;\n\n    case START_GAME:\n      return Object.assign({}, state, {\n        isPlaying: true\n      });\n      break;\n\n    case RESET_CARDS:\n      var initialCards = initialState.cards;\n      return Object.assign({}, state, {\n        cards: initialCards\n      });\n      break;\n\n    case SHUFFLE:\n      var array = state.cards;\n      var len = array.length - 1;\n\n      for (var i = len; i > 0; i--) {\n        var j = Math.floor(Math.random() * i);\n        var temp = array[i];\n        array[i] = array[j];\n        array[j] = temp;\n      }\n\n      return Object.assign({}, state, {\n        cards: _toConsumableArray(array)\n      });\n      break;\n\n    case LIMIT_CARDS:\n      var limitedCards = state.cards;\n      limitedCards.splice(state.numberOfPairs);\n      return Object.assign({}, state, {\n        cards: _toConsumableArray(limitedCards)\n      });\n      break;\n\n    case DUPLICATE_CARDS:\n      var duplicatedCards1 = clone(state.cards);\n      var duplicatedCards2 = clone(state.cards);\n      var newDuplicatedCards = [].concat(_toConsumableArray(duplicatedCards1), _toConsumableArray(duplicatedCards2));\n      newDuplicatedCards.forEach(function (el, index) {\n        el.index = index;\n        el.isActive = true;\n        el.match = false;\n      });\n      return Object.assign({}, state, {\n        cards: newDuplicatedCards\n      });\n      break;\n\n    case FLIP_ALL_CARDS:\n      var flipedCards = state.cards;\n      flipedCards.forEach(function (el, index) {\n        if (el.match === false) {\n          el.isActive = false;\n        }\n      });\n      return Object.assign({}, state, {\n        cards: _toConsumableArray(flipedCards),\n        matching: false,\n        isPlaying: true\n      });\n\n    case FLIP_CARD:\n      var flippedCardIndex = state.cards.findIndex(function (el) {\n        return el.index === action.payload;\n      });\n      var numberOfFoundPairs = state.numberOfFoundPairs;\n      var allCards = clone(state.cards); // flip first card and remember it\n\n      if (state.clickCounter === 0) {\n        var newCounter = state.clickCounter;\n        newCounter++;\n\n        var _allCards = clone(state.cards);\n\n        _allCards.forEach(function (el) {\n          if (el.index === action.payload) {\n            el.isActive = true;\n          }\n        });\n\n        var firstFlippedCard = _allCards[flippedCardIndex];\n        return Object.assign({}, state, {\n          cards: _toConsumableArray(_allCards),\n          clickCounter: newCounter,\n          matchingCard: firstFlippedCard\n        });\n      } else if (state.clickCounter === 1) {\n        var _newCounter = 0;\n        var numberOfAttempts = state.numberOfAttempts;\n        numberOfAttempts++; // flip Second Card\n\n        allCards.forEach(function (el) {\n          if (el.index === action.payload) {\n            el.isActive = true;\n          }\n        }); // does the two cards match ?\n\n        if (state.matchingCard.src === allCards[flippedCardIndex].src) {\n          allCards.forEach(function (el) {\n            if (el.src === state.matchingCard.src) {\n              el.match = true; // el.isActive = false;\n            }\n          });\n          numberOfFoundPairs++;\n        }\n\n        return Object.assign({}, state, {\n          cards: _toConsumableArray(allCards),\n          clickCounter: _newCounter,\n          matching: true,\n          matchingCard: initialState.matchingCard,\n          numberOfFoundPairs: numberOfFoundPairs,\n          numberOfAttempts: numberOfAttempts,\n          isPlaying: false\n        });\n      } // flip second card and change match:true for both\n\n\n      break;\n\n    default:\n      return state;\n  }\n}\n\nexport default rootReducer;","map":{"version":3,"sources":["C:/Users/chatb/Desktop/Code/nextJS/find-the-pair/redux/reducers/index.js"],"names":["CHANGE_NUMBER_OF_PAIRS","SHUFFLE","LIMIT_CARDS","DUPLICATE_CARDS","RESET_CARDS","START_GAME","FLIP_ALL_CARDS","FLIP_CARD","CHANGE_WIDTH","HYDRATE","flipCard","clone","require","initialState","width","numberOfPairs","numberOfFoundPairs","numberOfAttempts","isLoading","isPlaying","clickCounter","matching","matchingCard","cards","src","isActive","rootReducer","state","action","type","payload","Object","assign","initialCards","array","len","length","i","j","Math","floor","random","temp","limitedCards","splice","duplicatedCards1","duplicatedCards2","newDuplicatedCards","forEach","el","index","match","flipedCards","flippedCardIndex","findIndex","allCards","newCounter","firstFlippedCard"],"mappings":"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","sourcesContent":["import {\r\n  CHANGE_NUMBER_OF_PAIRS,\r\n  SHUFFLE,\r\n  LIMIT_CARDS,\r\n  DUPLICATE_CARDS,\r\n  RESET_CARDS,\r\n  START_GAME,\r\n  FLIP_ALL_CARDS,\r\n  FLIP_CARD,\r\n  CHANGE_WIDTH,\r\n} from \"../constants/action-types\";\r\nimport { HYDRATE } from \"next-redux-wrapper\";\r\nimport { flipCard } from \"../actions\";\r\n\r\nconst clone = require(\"rfdc\")();\r\n\r\nconst initialState = {\r\n  width: 127,\r\n  numberOfPairs: 6,\r\n  numberOfFoundPairs: 0,\r\n  numberOfAttempts: 0,\r\n  isLoading: true,\r\n  isPlaying: false,\r\n  clickCounter: 0,\r\n  matching: false,\r\n  matchingCard: null,\r\n  cards: [\r\n    {\r\n      src: \"/images/animals-bunny.jpg\",\r\n      isActive: false,\r\n    },\r\n    {\r\n      src: \"/images/animals-cat.jpg\",\r\n      isActive: false,\r\n    },\r\n    {\r\n      src: \"/images/animals-cat-2.jpg\",\r\n      isActive: false,\r\n    },\r\n    {\r\n      src: \"/images/animals-dog.jpg\",\r\n      isActive: false,\r\n    },\r\n    {\r\n      src: \"/images/animals-dog-2.jpg\",\r\n      isActive: false,\r\n    },\r\n    {\r\n      src: \"/images/animals-horse.jpg\",\r\n      isActive: false,\r\n    },\r\n    {\r\n      src: \"/images/animals-horse-2.jpg\",\r\n      isActive: false,\r\n    },\r\n    {\r\n      src: \"/images/architecture-london-towerbridge.jpg\",\r\n      isActive: false,\r\n    },\r\n    {\r\n      src: \"/images/architecture-moscow-redsquare.jpg\",\r\n      isActive: false,\r\n    },\r\n    {\r\n      src: \"/images/architecture-nederlanden.jpg\",\r\n      isActive: false,\r\n    },\r\n    {\r\n      src: \"/images/architecture-newyork-publiclibrary.jpg\",\r\n      isActive: false,\r\n    },\r\n    {\r\n      src: \"/images/architecture-paris-eiffeltower.jpg\",\r\n      isActive: false,\r\n    },\r\n    {\r\n      src: \"/images/cities-tokyo-night.jpg\",\r\n      isActive: false,\r\n    },\r\n    {\r\n      src: \"/images/flowers-reddahlia.jpg\",\r\n      isActive: false,\r\n    },\r\n    {\r\n      src: \"/images/flowers-waterlillies.jpg\",\r\n      isActive: false,\r\n    },\r\n    {\r\n      src: \"/images/flowers-windclock.jpg\",\r\n      isActive: false,\r\n    },\r\n    {\r\n      src: \"/images/landscape-1.jpg\",\r\n      isActive: false,\r\n    },\r\n    {\r\n      src: \"/images/landscape-2.jpg\",\r\n      isActive: false,\r\n    },\r\n    {\r\n      src: \"/images/landscape-2.jpg\",\r\n      isActive: false,\r\n    },\r\n    {\r\n      src: \"/images/landscape-netherlands-deurningen.jpg\",\r\n      isActive: false,\r\n    },\r\n    {\r\n      src: \"/images/landscape-us-edgewood.jpg\",\r\n      isActive: false,\r\n    },\r\n  ],\r\n};\r\n\r\nfunction rootReducer(state = initialState, action) {\r\n  switch (action.type) {\r\n    case HYDRATE:\r\n      return { ...state, ...action.payload };\r\n      break;\r\n    case CHANGE_NUMBER_OF_PAIRS:\r\n      let numberOfPairs = action.payload;\r\n      return Object.assign({}, state, {\r\n        numberOfPairs,\r\n      });\r\n      break;\r\n    case CHANGE_WIDTH:\r\n      let width = action.payload;\r\n      return Object.assign({}, state, {\r\n        width,\r\n      });\r\n      break;\r\n    case START_GAME:\r\n      return Object.assign({}, state, { isPlaying: true });\r\n      break;\r\n    case RESET_CARDS:\r\n      let initialCards = initialState.cards;\r\n\r\n      return Object.assign({}, state, { cards: initialCards });\r\n      break;\r\n    case SHUFFLE:\r\n      let array = state.cards;\r\n      let len = array.length - 1;\r\n      for (let i = len; i > 0; i--) {\r\n        const j = Math.floor(Math.random() * i);\r\n        const temp = array[i];\r\n        array[i] = array[j];\r\n        array[j] = temp;\r\n      }\r\n      return Object.assign({}, state, { cards: [...array] });\r\n      break;\r\n    case LIMIT_CARDS:\r\n      let limitedCards = state.cards;\r\n\r\n      limitedCards.splice(state.numberOfPairs);\r\n\r\n      return Object.assign({}, state, { cards: [...limitedCards] });\r\n      break;\r\n    case DUPLICATE_CARDS:\r\n      let duplicatedCards1 = clone(state.cards);\r\n      let duplicatedCards2 = clone(state.cards);\r\n\r\n      let newDuplicatedCards = [...duplicatedCards1, ...duplicatedCards2];\r\n      newDuplicatedCards.forEach((el, index) => {\r\n        el.index = index;\r\n        el.isActive = true;\r\n        el.match = false;\r\n      });\r\n\r\n      return Object.assign({}, state, {\r\n        cards: newDuplicatedCards,\r\n      });\r\n      break;\r\n    case FLIP_ALL_CARDS:\r\n      let flipedCards = state.cards;\r\n      flipedCards.forEach((el, index) => {\r\n        if (el.match === false) {\r\n          el.isActive = false;\r\n        }\r\n      });\r\n      return Object.assign({}, state, {\r\n        cards: [...flipedCards],\r\n        matching: false,\r\n        isPlaying: true,\r\n      });\r\n    case FLIP_CARD:\r\n      let flippedCardIndex = state.cards.findIndex(\r\n        (el) => el.index === action.payload\r\n      );\r\n\r\n      let numberOfFoundPairs = state.numberOfFoundPairs;\r\n\r\n      let allCards = clone(state.cards);\r\n      // flip first card and remember it\r\n      if (state.clickCounter === 0) {\r\n        let newCounter = state.clickCounter;\r\n        newCounter++;\r\n\r\n        let allCards = clone(state.cards);\r\n\r\n        allCards.forEach((el) => {\r\n          if (el.index === action.payload) {\r\n            el.isActive = true;\r\n          }\r\n        });\r\n\r\n        let firstFlippedCard = allCards[flippedCardIndex];\r\n        return Object.assign({}, state, {\r\n          cards: [...allCards],\r\n          clickCounter: newCounter,\r\n          matchingCard: firstFlippedCard,\r\n        });\r\n      } else if (state.clickCounter === 1) {\r\n        let newCounter = 0;\r\n        let numberOfAttempts = state.numberOfAttempts;\r\n        numberOfAttempts++;\r\n\r\n        // flip Second Card\r\n        allCards.forEach((el) => {\r\n          if (el.index === action.payload) {\r\n            el.isActive = true;\r\n          }\r\n        });\r\n\r\n        // does the two cards match ?\r\n        if (state.matchingCard.src === allCards[flippedCardIndex].src) {\r\n          allCards.forEach((el) => {\r\n            if (el.src === state.matchingCard.src) {\r\n              el.match = true;\r\n              // el.isActive = false;\r\n            }\r\n          });\r\n\r\n          numberOfFoundPairs++;\r\n        }\r\n\r\n        return Object.assign({}, state, {\r\n          cards: [...allCards],\r\n          clickCounter: newCounter,\r\n          matching: true,\r\n          matchingCard: initialState.matchingCard,\r\n          numberOfFoundPairs,\r\n          numberOfAttempts,\r\n          isPlaying: false,\r\n        });\r\n      }\r\n\r\n      // flip second card and change match:true for both\r\n\r\n      break;\r\n    default:\r\n      return state;\r\n  }\r\n}\r\n\r\nexport default rootReducer;\r\n"]},"metadata":{},"sourceType":"module"}