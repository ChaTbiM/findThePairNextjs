{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\chatb\\\\Desktop\\\\Code\\\\nextJS\\\\find-the-pair\\\\components\\\\Grid.jsx\",\n    _s = $RefreshSig$();\n\nvar __jsx = React.createElement;\nimport React, { useEffect } from \"react\";\nimport { connect } from \"react-redux\";\nimport styled from \"styled-components\";\nimport { LIMIT_CARDS, SHUFFLE, DUPLICATE_CARDS, RESET_CARDS } from \"../redux/constants/action-types\";\n\nfunction renderCards(gameState) {\n  var _this = this;\n\n  if (gameState === \"loading\") {\n    return props.cards.map(function (el, index) {\n      return __jsx(\"img\", {\n        className: \"testing\",\n        key: el.src + index,\n        width: \"125\",\n        height: \"125\",\n        src: el.src,\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 15,\n          columnNumber: 9\n        }\n      });\n    });\n  } else if (gameState === \"playing\") {\n    return props.cards.map(function (el, index) {\n      return __jsx(\"div\", {\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 26,\n          columnNumber: 14\n        }\n      }, \"1\");\n    });\n  }\n}\n\nfunction Grid(props) {\n  _s();\n\n  var _this2 = this;\n\n  useEffect(function () {\n    props.resetCards();\n    props.shuffleCards();\n    props.limitCards();\n    props.duplicateCards();\n    props.shuffleCards();\n  }, [props.numberOfPairs]);\n  return (//   grid Item\n    __jsx(\"gridContainer\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 41,\n        columnNumber: 5\n      }\n    }, props.cards.map(function (el, index) {\n      return __jsx(\"div\", {\n        style: {\n          margin: \"0 1px\",\n          display: \"inline-block\",\n          height: \"125px\",\n          width: \"125px\",\n          backgroundColor: \"#bbb\"\n        },\n        __self: _this2,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 44,\n          columnNumber: 11\n        }\n      }, __jsx(\"img\", {\n        style: {\n          display: \"none\"\n        },\n        key: el.src + index,\n        \"data-index\": el.index,\n        src: el.src,\n        __self: _this2,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 53,\n          columnNumber: 13\n        }\n      }));\n    }))\n  );\n}\n\n_s(Grid, \"OD7bBpZva5O2jO+Puf00hKivP7c=\");\n\n_c = Grid;\n\nvar mapStateToProps = function mapStateToProps(state) {\n  return {\n    numberOfPairs: state.numberOfPairs,\n    cards: state.cards,\n    gameState: state.gameState\n  };\n};\n\nvar mapDispatchToProps = function mapDispatchToProps(dispatch) {\n  return {\n    shuffleCards: function shuffleCards() {\n      return dispatch({\n        type: SHUFFLE\n      });\n    },\n    limitCards: function limitCards() {\n      return dispatch({\n        type: LIMIT_CARDS\n      });\n    },\n    duplicateCards: function duplicateCards() {\n      return dispatch({\n        type: DUPLICATE_CARDS\n      });\n    },\n    resetCards: function resetCards() {\n      return dispatch({\n        type: RESET_CARDS\n      });\n    }\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Grid); // ---------------------------------\n\nvar gridContainer = styled.div.withConfig({\n  displayName: \"Grid__gridContainer\",\n  componentId: \"v3z7jl-0\"\n})([\"width:520px;height:520px;margin:5px auto;\"]);\n\nvar _c;\n\n$RefreshReg$(_c, \"Grid\");","map":{"version":3,"sources":["C:/Users/chatb/Desktop/Code/nextJS/find-the-pair/components/Grid.jsx"],"names":["React","useEffect","connect","styled","LIMIT_CARDS","SHUFFLE","DUPLICATE_CARDS","RESET_CARDS","renderCards","gameState","props","cards","map","el","index","src","Grid","resetCards","shuffleCards","limitCards","duplicateCards","numberOfPairs","margin","display","height","width","backgroundColor","mapStateToProps","state","mapDispatchToProps","dispatch","type","gridContainer","div"],"mappings":"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","sourcesContent":["import React, { useEffect } from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport styled from \"styled-components\";\r\nimport {\r\n  LIMIT_CARDS,\r\n  SHUFFLE,\r\n  DUPLICATE_CARDS,\r\n  RESET_CARDS,\r\n} from \"../redux/constants/action-types\";\r\n\r\nfunction renderCards(gameState) {\r\n  if (gameState === \"loading\") {\r\n    return props.cards.map((el, index) => {\r\n      return (\r\n        <img\r\n          className=\"testing\"\r\n          key={el.src + index}\r\n          width=\"125\"\r\n          height=\"125\"\r\n          src={el.src}\r\n        />\r\n      );\r\n    });\r\n  } else if (gameState === \"playing\") {\r\n    return props.cards.map((el, index) => {\r\n      return <div>1</div>;\r\n    });\r\n  }\r\n}\r\nfunction Grid(props) {\r\n  useEffect(() => {\r\n    props.resetCards();\r\n    props.shuffleCards();\r\n    props.limitCards();\r\n    props.duplicateCards();\r\n    props.shuffleCards();\r\n  }, [props.numberOfPairs]);\r\n\r\n  return (\r\n    //   grid Item\r\n    <gridContainer>\r\n      {props.cards.map((el, index) => {\r\n        return (\r\n          <div\r\n            style={{\r\n              margin: \"0 1px\",\r\n              display: \"inline-block\",\r\n              height: \"125px\",\r\n              width: \"125px\",\r\n              backgroundColor: \"#bbb\",\r\n            }}\r\n          >\r\n            <img\r\n              style={{ display: \"none\" }}\r\n              key={el.src + index}\r\n              data-index={el.index}\r\n              src={el.src}\r\n            />\r\n          </div>\r\n        );\r\n      })}\r\n    </gridContainer>\r\n  );\r\n}\r\n\r\nconst mapStateToProps = (state) => ({\r\n  numberOfPairs: state.numberOfPairs,\r\n  cards: state.cards,\r\n  gameState: state.gameState,\r\n});\r\n\r\nconst mapDispatchToProps = (dispatch) => ({\r\n  shuffleCards: () => dispatch({ type: SHUFFLE }),\r\n  limitCards: () => dispatch({ type: LIMIT_CARDS }),\r\n  duplicateCards: () => dispatch({ type: DUPLICATE_CARDS }),\r\n  resetCards: () => dispatch({ type: RESET_CARDS }),\r\n});\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Grid);\r\n\r\n// ---------------------------------\r\nconst gridContainer = styled.div`\r\n  width: 520px;\r\n  height: 520px;\r\n  margin: 5px auto;\r\n`;\r\n"]},"metadata":{},"sourceType":"module"}