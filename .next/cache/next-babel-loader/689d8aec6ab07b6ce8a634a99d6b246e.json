{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { CHANGE_NUMBER_OF_PAIRS, SHUFFLE, LIMIT_CARDS, DUPLICATE_CARDS, RESET_CARDS, START_GAME, FLIP_ALL_CARDS, FLIP_CARD, CHANGE_WIDTH } from \"../constants/action-types\";\nimport { HYDRATE } from \"next-redux-wrapper\";\nimport { flipCard } from \"../actions\";\n\nconst clone = require(\"rfdc\")();\n\nconst initialState = {\n  numberOfPairs: 6,\n  width: 125,\n  isLoading: true,\n  clickCounter: 0,\n  matching: false,\n  matchingCard: null,\n  cards: [{\n    src: \"/images/animals-bunny.jpg\",\n    isActive: false\n  }, {\n    src: \"/images/animals-cat.jpg\",\n    isActive: false\n  }, {\n    src: \"/images/animals-cat-2.jpg\",\n    isActive: false\n  }, {\n    src: \"/images/animals-dog.jpg\",\n    isActive: false\n  }, {\n    src: \"/images/animals-dog-2.jpg\",\n    isActive: false\n  }, {\n    src: \"/images/animals-horse.jpg\",\n    isActive: false\n  }, {\n    src: \"/images/animals-horse-2.jpg\",\n    isActive: false\n  }, {\n    src: \"/images/architecture-london-towerbridge.jpg\",\n    isActive: false\n  }, {\n    src: \"/images/architecture-moscow-redsquare.jpg\",\n    isActive: false\n  }, {\n    src: \"/images/architecture-nederlanden.jpg\",\n    isActive: false\n  }, {\n    src: \"/images/architecture-newyork-publiclibrary.jpg\",\n    isActive: false\n  }, {\n    src: \"/images/architecture-paris-eiffeltower.jpg\",\n    isActive: false\n  }, {\n    src: \"/images/cities-tokyo-night.jpg\",\n    isActive: false\n  }, {\n    src: \"/images/flowers-reddahlia.jpg\",\n    isActive: false\n  }, {\n    src: \"/images/flowers-waterlillies.jpg\",\n    isActive: false\n  }, {\n    src: \"/images/flowers-windclock.jpg\",\n    isActive: false\n  }, {\n    src: \"/images/landscape-1.jpg\",\n    isActive: false\n  }, {\n    src: \"/images/landscape-2.jpg\",\n    isActive: false\n  }, {\n    src: \"/images/landscape-2.jpg\",\n    isActive: false\n  }, {\n    src: \"/images/landscape-netherlands-deurningen.jpg\",\n    isActive: false\n  }, {\n    src: \"/images/landscape-us-edgewood.jpg\",\n    isActive: false\n  }]\n};\n\nfunction rootReducer(state = initialState, action) {\n  switch (action.type) {\n    case HYDRATE:\n      return _objectSpread(_objectSpread({}, state), action.payload);\n      break;\n\n    case CHANGE_NUMBER_OF_PAIRS:\n      let numberOfPairs = action.payload.numberOfPairs;\n      let width = action.payload.width;\n      console.log(\"width\", width);\n      return Object.assign({}, state, {\n        numberOfPairs,\n        width\n      });\n      break;\n\n    case START_GAME:\n      return Object.assign({}, state, {\n        gameState: \"playing\"\n      });\n      break;\n\n    case RESET_CARDS:\n      let initialCards = initialState.cards;\n      return Object.assign({}, state, {\n        cards: initialCards\n      });\n      break;\n\n    case SHUFFLE:\n      let array = state.cards;\n      let len = array.length - 1;\n\n      for (let i = len; i > 0; i--) {\n        const j = Math.floor(Math.random() * i);\n        const temp = array[i];\n        array[i] = array[j];\n        array[j] = temp;\n      }\n\n      return Object.assign({}, state, {\n        cards: [...array]\n      });\n      break;\n\n    case LIMIT_CARDS:\n      let limitedCards = state.cards;\n      limitedCards.splice(state.numberOfPairs);\n      return Object.assign({}, state, {\n        cards: [...limitedCards]\n      });\n      break;\n\n    case DUPLICATE_CARDS:\n      let duplicatedCards1 = clone(state.cards);\n      let duplicatedCards2 = clone(state.cards);\n      let newDuplicatedCards = [...duplicatedCards1, ...duplicatedCards2];\n      newDuplicatedCards.forEach((el, index) => {\n        el.index = index;\n        el.isActive = true;\n        el.match = false;\n      });\n      return Object.assign({}, state, {\n        cards: newDuplicatedCards\n      });\n      break;\n\n    case FLIP_ALL_CARDS:\n      let flipedCards = state.cards;\n      flipedCards.forEach((el, index) => {\n        if (el.match === false) {\n          el.isActive = false;\n        }\n      });\n      return Object.assign({}, state, {\n        cards: [...flipedCards],\n        matching: false\n      });\n\n    case FLIP_CARD:\n      let flippedCardIndex = state.cards.findIndex(el => el.index === action.payload);\n      let allCards = clone(state.cards); // flip first card and remember it\n\n      if (state.clickCounter === 0) {\n        let newCounter = state.clickCounter;\n        newCounter++;\n        let allCards = clone(state.cards);\n        allCards.forEach(el => {\n          if (el.index === action.payload) {\n            el.isActive = true;\n          }\n        });\n        let firstFlippedCard = allCards[flippedCardIndex];\n        return Object.assign({}, state, {\n          cards: [...allCards],\n          clickCounter: newCounter,\n          matchingCard: firstFlippedCard\n        });\n      } else if (state.clickCounter === 1) {\n        let newCounter = 0; // flip Second Card\n\n        allCards.forEach(el => {\n          if (el.index === action.payload) {\n            el.isActive = true;\n          }\n        }); // does the two cards match ?\n\n        if (state.matchingCard.src === allCards[flippedCardIndex].src) {\n          allCards.forEach(el => {\n            if (el.src === state.matchingCard.src) {\n              el.match = true;\n            }\n          });\n        }\n\n        return Object.assign({}, state, {\n          cards: [...allCards],\n          clickCounter: newCounter,\n          matching: true,\n          matchingCard: initialState.matchingCard\n        });\n      } // flip second card and change match:true for both\n\n\n      break;\n\n    default:\n      return state;\n  }\n}\n\nexport default rootReducer;","map":{"version":3,"sources":["C:/Users/chatb/Desktop/Code/nextJS/find-the-pair/redux/reducers/index.js"],"names":["CHANGE_NUMBER_OF_PAIRS","SHUFFLE","LIMIT_CARDS","DUPLICATE_CARDS","RESET_CARDS","START_GAME","FLIP_ALL_CARDS","FLIP_CARD","CHANGE_WIDTH","HYDRATE","flipCard","clone","require","initialState","numberOfPairs","width","isLoading","clickCounter","matching","matchingCard","cards","src","isActive","rootReducer","state","action","type","payload","console","log","Object","assign","gameState","initialCards","array","len","length","i","j","Math","floor","random","temp","limitedCards","splice","duplicatedCards1","duplicatedCards2","newDuplicatedCards","forEach","el","index","match","flipedCards","flippedCardIndex","findIndex","allCards","newCounter","firstFlippedCard"],"mappings":"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","sourcesContent":["import {\r\n  CHANGE_NUMBER_OF_PAIRS,\r\n  SHUFFLE,\r\n  LIMIT_CARDS,\r\n  DUPLICATE_CARDS,\r\n  RESET_CARDS,\r\n  START_GAME,\r\n  FLIP_ALL_CARDS,\r\n  FLIP_CARD,\r\n  CHANGE_WIDTH,\r\n} from \"../constants/action-types\";\r\nimport { HYDRATE } from \"next-redux-wrapper\";\r\nimport { flipCard } from \"../actions\";\r\n\r\nconst clone = require(\"rfdc\")();\r\n\r\nconst initialState = {\r\n  numberOfPairs: 6,\r\n  width: 125,\r\n  isLoading: true,\r\n  clickCounter: 0,\r\n  matching: false,\r\n  matchingCard: null,\r\n  cards: [\r\n    {\r\n      src: \"/images/animals-bunny.jpg\",\r\n      isActive: false,\r\n    },\r\n    {\r\n      src: \"/images/animals-cat.jpg\",\r\n      isActive: false,\r\n    },\r\n    {\r\n      src: \"/images/animals-cat-2.jpg\",\r\n      isActive: false,\r\n    },\r\n    {\r\n      src: \"/images/animals-dog.jpg\",\r\n      isActive: false,\r\n    },\r\n    {\r\n      src: \"/images/animals-dog-2.jpg\",\r\n      isActive: false,\r\n    },\r\n    {\r\n      src: \"/images/animals-horse.jpg\",\r\n      isActive: false,\r\n    },\r\n    {\r\n      src: \"/images/animals-horse-2.jpg\",\r\n      isActive: false,\r\n    },\r\n    {\r\n      src: \"/images/architecture-london-towerbridge.jpg\",\r\n      isActive: false,\r\n    },\r\n    {\r\n      src: \"/images/architecture-moscow-redsquare.jpg\",\r\n      isActive: false,\r\n    },\r\n    {\r\n      src: \"/images/architecture-nederlanden.jpg\",\r\n      isActive: false,\r\n    },\r\n    {\r\n      src: \"/images/architecture-newyork-publiclibrary.jpg\",\r\n      isActive: false,\r\n    },\r\n    {\r\n      src: \"/images/architecture-paris-eiffeltower.jpg\",\r\n      isActive: false,\r\n    },\r\n    {\r\n      src: \"/images/cities-tokyo-night.jpg\",\r\n      isActive: false,\r\n    },\r\n    {\r\n      src: \"/images/flowers-reddahlia.jpg\",\r\n      isActive: false,\r\n    },\r\n    {\r\n      src: \"/images/flowers-waterlillies.jpg\",\r\n      isActive: false,\r\n    },\r\n    {\r\n      src: \"/images/flowers-windclock.jpg\",\r\n      isActive: false,\r\n    },\r\n    {\r\n      src: \"/images/landscape-1.jpg\",\r\n      isActive: false,\r\n    },\r\n    {\r\n      src: \"/images/landscape-2.jpg\",\r\n      isActive: false,\r\n    },\r\n    {\r\n      src: \"/images/landscape-2.jpg\",\r\n      isActive: false,\r\n    },\r\n    {\r\n      src: \"/images/landscape-netherlands-deurningen.jpg\",\r\n      isActive: false,\r\n    },\r\n    {\r\n      src: \"/images/landscape-us-edgewood.jpg\",\r\n      isActive: false,\r\n    },\r\n  ],\r\n};\r\n\r\nfunction rootReducer(state = initialState, action) {\r\n  switch (action.type) {\r\n    case HYDRATE:\r\n      return { ...state, ...action.payload };\r\n      break;\r\n    case CHANGE_NUMBER_OF_PAIRS:\r\n      let numberOfPairs = action.payload.numberOfPairs;\r\n      let width = action.payload.width;\r\n      console.log(\"width\", width);\r\n      return Object.assign({}, state, {\r\n        numberOfPairs,\r\n        width,\r\n      });\r\n      break;\r\n    case START_GAME:\r\n      return Object.assign({}, state, { gameState: \"playing\" });\r\n      break;\r\n    case RESET_CARDS:\r\n      let initialCards = initialState.cards;\r\n\r\n      return Object.assign({}, state, { cards: initialCards });\r\n      break;\r\n    case SHUFFLE:\r\n      let array = state.cards;\r\n      let len = array.length - 1;\r\n      for (let i = len; i > 0; i--) {\r\n        const j = Math.floor(Math.random() * i);\r\n        const temp = array[i];\r\n        array[i] = array[j];\r\n        array[j] = temp;\r\n      }\r\n      return Object.assign({}, state, { cards: [...array] });\r\n      break;\r\n    case LIMIT_CARDS:\r\n      let limitedCards = state.cards;\r\n\r\n      limitedCards.splice(state.numberOfPairs);\r\n\r\n      return Object.assign({}, state, { cards: [...limitedCards] });\r\n      break;\r\n    case DUPLICATE_CARDS:\r\n      let duplicatedCards1 = clone(state.cards);\r\n      let duplicatedCards2 = clone(state.cards);\r\n\r\n      let newDuplicatedCards = [...duplicatedCards1, ...duplicatedCards2];\r\n      newDuplicatedCards.forEach((el, index) => {\r\n        el.index = index;\r\n        el.isActive = true;\r\n        el.match = false;\r\n      });\r\n\r\n      return Object.assign({}, state, {\r\n        cards: newDuplicatedCards,\r\n      });\r\n      break;\r\n    case FLIP_ALL_CARDS:\r\n      let flipedCards = state.cards;\r\n      flipedCards.forEach((el, index) => {\r\n        if (el.match === false) {\r\n          el.isActive = false;\r\n        }\r\n      });\r\n      return Object.assign({}, state, {\r\n        cards: [...flipedCards],\r\n        matching: false,\r\n      });\r\n    case FLIP_CARD:\r\n      let flippedCardIndex = state.cards.findIndex(\r\n        (el) => el.index === action.payload\r\n      );\r\n      let allCards = clone(state.cards);\r\n      // flip first card and remember it\r\n      if (state.clickCounter === 0) {\r\n        let newCounter = state.clickCounter;\r\n        newCounter++;\r\n\r\n        let allCards = clone(state.cards);\r\n\r\n        allCards.forEach((el) => {\r\n          if (el.index === action.payload) {\r\n            el.isActive = true;\r\n          }\r\n        });\r\n\r\n        let firstFlippedCard = allCards[flippedCardIndex];\r\n        return Object.assign({}, state, {\r\n          cards: [...allCards],\r\n          clickCounter: newCounter,\r\n          matchingCard: firstFlippedCard,\r\n        });\r\n      } else if (state.clickCounter === 1) {\r\n        let newCounter = 0;\r\n\r\n        // flip Second Card\r\n        allCards.forEach((el) => {\r\n          if (el.index === action.payload) {\r\n            el.isActive = true;\r\n          }\r\n        });\r\n\r\n        // does the two cards match ?\r\n        if (state.matchingCard.src === allCards[flippedCardIndex].src) {\r\n          allCards.forEach((el) => {\r\n            if (el.src === state.matchingCard.src) {\r\n              el.match = true;\r\n            }\r\n          });\r\n        }\r\n\r\n        return Object.assign({}, state, {\r\n          cards: [...allCards],\r\n          clickCounter: newCounter,\r\n          matching: true,\r\n          matchingCard: initialState.matchingCard,\r\n        });\r\n      }\r\n\r\n      // flip second card and change match:true for both\r\n\r\n      break;\r\n    default:\r\n      return state;\r\n  }\r\n}\r\n\r\nexport default rootReducer;\r\n"]},"metadata":{},"sourceType":"module"}